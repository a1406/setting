* ngx_stream_proxy_process
** 使用场景
*** ngx_stream_proxy_handler[412]  if (ngx_stream_proxy_process(s, 0, 0) != NGX_OK) {
    接受连接，注册读事件
*** ngx_stream_proxy_init_upstream[566] if (ngx_stream_proxy_process(s, 1, 0) != NGX_OK) {
    upstream连接成功的时候调用
*** ngx_stream_proxy_init_upstream[570] ngx_stream_proxy_process(s, 0, 1);
    upstream连接成功的时候调用
*** ngx_stream_proxy_process_connection[948] ngx_stream_proxy_process(s, from_upstream, ev->write);
    接受数据

* ngx_stream_proxy_connect  向upstream发起连接
**  连接的时候，完成的回调在 ngx_stream_proxy_connect_handler
    如果连接成功，那么调用ngx_stream_proxy_init_upstream

** ngx_stream_proxy_init_upstream
    将读写事件的回调设置成ngx_stream_proxy_upstream_handler; 然后调用ngx_stream_proxy_process

* ngx_stream_core_run_phases
  根据session的phase_handler来调用，当checker返回NGX_OK的时候退出

* ngx_stream_init_phase_handlers
  处理phase事件的回调，一共有三种类型的phase，prehead,content,default,
  对应的处理函数是 ngx_stream_core_preread_phase; ngx_stream_core_content_phase; ngx_stream_core_generic_phase;

** ngx_stream_core_preread_phase
   只有ssl模块在用

** ngx_stream_core_content_phase
   没有用

** ngx_stream_core_generic_phase
   多个handle可以被依次调用，规则是
   如果handle返回NGX_OK, 那么调用init里面注册的next, next是可以跳过数组里面多个handle的
   如果handle返回NGX_DECLINED, 那么调用init里面注册的数组的下一个
   如果handle返回NGX_AGAIN或者NGX_DONE, 那么调用结束
   如果handle返回NGX_ERROR, 那么关闭连接，调用结束
