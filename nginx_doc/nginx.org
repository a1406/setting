* 事件定义
** 事件列表
总共有如下事件
#define ngx_process_events   ngx_event_actions.process_events
#define ngx_done_events      ngx_event_actions.done

#define ngx_add_event        ngx_event_actions.add
#define ngx_del_event        ngx_event_actions.del
#define ngx_add_conn         ngx_event_actions.add_conn
#define ngx_del_conn         ngx_event_actions.del_conn

#define ngx_notify           ngx_event_actions.notify

#define ngx_add_timer        ngx_event_add_timer
#define ngx_del_timer        ngx_event_del_timer

** ngx_process_events
处理事件的主逻辑循环，被ngx_process_events_and_timers调用

** ngx_done_events
无处使用
** ngx_add_event
添加事件
** ngx_del_event
删除事件
** ngx_add_conn
   添加连接, 如果有该接口，框架就不会调用ngx_add_event了
** ngx_del_conn
连接断开, 如果有该接口，框架就不会调用ngx_del_event了
** ngx_notify
多线程使用
** ngx_add_timer
添加定时器事件
** ngx_del_timer
删除定时器事件

* io接口
** io接口列表
有如下io接口
#define ngx_recv             ngx_io.recv
#define ngx_recv_chain       ngx_io.recv_chain
#define ngx_udp_recv         ngx_io.udp_recv
#define ngx_send             ngx_io.send
#define ngx_send_chain       ngx_io.send_chain

** ngx_recv
** ngx_recv_chain
** ngx_udp_recv
** ngx_send
** ngx_send_chain

* 监听网络
** 调用ngx_create_listening向cycle->listening.elts数组添加元素，之后ngx_event_process_init函数便会listen，
** 并且注册ngx_event_accept;为read的handle，这样在有连接进来的时候，就会调用ngx_event_accept了,如下
#0  ngx_array_push (a=0x726258) at src/core/ngx_array.c:90
#1  0x0000000000418d32 in ngx_create_listening (cf=0x7fffffffdec0, sockaddr=0x72a290, socklen=16) at src/core/ngx_connection.c:27
#2  0x00000000004d06e4 in ngx_stream_optimize_servers (cf=0x7fffffffdec0, ports=0x7fffffffdb50) at src/stream/ngx_stream.c:365
#3  0x00000000004d036a in ngx_stream_block (cf=0x7fffffffdec0, cmd=0x711960 <ngx_stream_commands>, conf=0x727308) at src/stream/ngx_stream.c:242
#4  0x0000000000420c29 in ngx_conf_handler (cf=0x7fffffffdec0, last=1) at src/core/ngx_conf_file.c:427
#5  0x00000000004207ce in ngx_conf_parse (cf=0x7fffffffdec0, filename=0x726370) at src/core/ngx_conf_file.c:283
#6  0x000000000041ca62 in ngx_init_cycle (old_cycle=0x7fffffffe090) at src/core/ngx_cycle.c:268
#7  0x00000000004035aa in main (argc=5, argv=0x7fffffffe388) at src/core/nginx.c:266

#0  ngx_array_push (a=0x726258) at src/core/ngx_array.c:90
#1  0x0000000000418d32 in ngx_create_listening (cf=0x7fffffffdec0, sockaddr=0x72ad30, socklen=16) at src/core/ngx_connection.c:27
#2  0x0000000000441269 in ngx_http_add_listening (cf=0x7fffffffdec0, addr=0x72ad30) at src/http/ngx_http.c:1766
#3  0x0000000000441177 in ngx_http_init_listening (cf=0x7fffffffdec0, port=0x72acc0) at src/http/ngx_http.c:1717
#4  0x000000000044094c in ngx_http_optimize_servers (cf=0x7fffffffdec0, cmcf=0x729170, ports=0x72ac98) at src/http/ngx_http.c:1471
#5  0x000000000043e740 in ngx_http_block (cf=0x7fffffffdec0, cmd=0x702440 <ngx_http_commands>, conf=0x727178) at src/http/ngx_http.c:340
#6  0x0000000000420c29 in ngx_conf_handler (cf=0x7fffffffdec0, last=1) at src/core/ngx_conf_file.c:427
#7  0x00000000004207ce in ngx_conf_parse (cf=0x7fffffffdec0, filename=0x726370) at src/core/ngx_conf_file.c:283
#8  0x000000000041ca62 in ngx_init_cycle (old_cycle=0x7fffffffe090) at src/core/ngx_cycle.c:268
#9  0x00000000004035aa in main (argc=5, argv=0x7fffffffe388) at src/core/nginx.c:266

* 接受连接
** 在ngx_event_process_init中注册了读事件以及读事件的回调，如下
            rev->handler = ngx_event_accept;

            if (ngx_use_accept_mutex) {
                continue;
            }

            if (ngx_add_event(rev, NGX_READ_EVENT, 0) == NGX_ERROR) {

#0  ngx_event_accept (ev=0x747210) at src/event/ngx_event_accept.c:20
#1  0x000000000043cad7 in ngx_epoll_process_events (cycle=0x7261c0, timer=18446744073709551615, flags=1) at src/event/modules/ngx_epoll_module.c:822
#2  0x000000000042d2f2 in ngx_process_events_and_timers (cycle=0x7261c0) at src/event/ngx_event.c:242
#3  0x0000000000439226 in ngx_single_process_cycle (cycle=0x7261c0) at src/os/unix/ngx_process_cycle.c:309
#4  0x000000000040395b in main (argc=5, argv=0x7fffffffe388) at src/core/nginx.c:354

** 在连接完成后，会调用ngx_listening_t的handler，如下
        ls->handler(c);
该handler应该在ngx_create_listening完成的时候设置, 在handler里面要做诸如注册新fd的读事件等事情, 如ngx_stream_init_connection

* 接收数据
** 在ngx_event_accept中注册读写接口
        c->recv = ngx_recv;
        c->send = ngx_send;

#0  ngx_unix_recv (c=0x7ffff7fac1b0, buf=0x72a180 "abc", size=16384) at src/os/unix/ngx_recv.c:136
#1  0x00000000004d3a15 in ngx_stream_proxy_process (s=0x7254e0, from_upstream=0, do_write=0) at src/stream/ngx_stream_proxy_module.c:1108
#2  0x00000000004d35a8 in ngx_stream_proxy_process_connection (ev=0x7472d0, from_upstream=0) at src/stream/ngx_stream_proxy_module.c:948
#3  0x00000000004d335d in ngx_stream_proxy_downstream_handler (ev=0x7472d0) at src/stream/ngx_stream_proxy_module.c:877
#4  0x000000000043cad7 in ngx_epoll_process_events (cycle=0x7261c0, timer=600000, flags=1) at src/event/modules/ngx_epoll_module.c:822
#5  0x000000000042d2f2 in ngx_process_events_and_timers (cycle=0x7261c0) at src/event/ngx_event.c:242
#6  0x0000000000439226 in ngx_single_process_cycle (cycle=0x7261c0) at src/os/unix/ngx_process_cycle.c:309
#7  0x000000000040395b in main (argc=5, argv=0x7fffffffe388) at src/core/nginx.c:354

** 还注册了读事件
#0  ngx_epoll_add_event (ev=0x7472d0, event=8193, flags=2147483648) at src/event/modules/ngx_epoll_module.c:510
#1  0x000000000042d3de in ngx_handle_read_event (rev=0x7472d0, flags=0) at src/event/ngx_event.c:271
#2  0x00000000004d3c40 in ngx_stream_proxy_process (s=0x7254e0, from_upstream=0, do_write=0) at src/stream/ngx_stream_proxy_module.c:1158
#3  0x00000000004d2aa3 in ngx_stream_proxy_handler (s=0x7254e0) at src/stream/ngx_stream_proxy_module.c:412
#4  0x00000000004d1325 in ngx_stream_init_session (c=0x7ffff7fac1b0) at src/stream/ngx_stream_handler.c:231
#5  0x00000000004d1276 in ngx_stream_init_connection (c=0x7ffff7fac1b0) at src/stream/ngx_stream_handler.c:210
#6  0x0000000000430730 in ngx_event_accept (ev=0x747210) at src/event/ngx_event_accept.c:356
#7  0x000000000043cad7 in ngx_epoll_process_events (cycle=0x7261c0, timer=18446744073709551615, flags=1) at src/event/modules/ngx_epoll_module.c:822
#8  0x000000000042d2f2 in ngx_process_events_and_timers (cycle=0x7261c0) at src/event/ngx_event.c:242
#9  0x0000000000439226 in ngx_single_process_cycle (cycle=0x7261c0) at src/os/unix/ngx_process_cycle.c:309
#10 0x000000000040395b in main (argc=5, argv=0x7fffffffe388) at src/core/nginx.c:354


* 发送数据
** 
#0  ngx_unix_send (c=0x7ffff7fac280, buf=0x72a180 "dsf", size=3) at src/os/unix/ngx_send.c:20
#1  0x00000000004d3880 in ngx_stream_proxy_process (s=0x7254e0, from_upstream=0, do_write=1) at src/stream/ngx_stream_proxy_module.c:1070
#2  0x00000000004d35a8 in ngx_stream_proxy_process_connection (ev=0x7472d0, from_upstream=0) at src/stream/ngx_stream_proxy_module.c:948
#3  0x00000000004d335d in ngx_stream_proxy_downstream_handler (ev=0x7472d0) at src/stream/ngx_stream_proxy_module.c:877
#4  0x000000000043cad7 in ngx_epoll_process_events (cycle=0x7261c0, timer=600000, flags=1) at src/event/modules/ngx_epoll_module.c:822
#5  0x000000000042d2f2 in ngx_process_events_and_timers (cycle=0x7261c0) at src/event/ngx_event.c:242
#6  0x0000000000439226 in ngx_single_process_cycle (cycle=0x7261c0) at src/os/unix/ngx_process_cycle.c:309
#7  0x000000000040395b in main (argc=5, argv=0x7fffffffe388) at src/core/nginx.c:354
