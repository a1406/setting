;;(setq shell-file-name "bash")
;;(setenv "SHELL" shell-file-name)
;;(setq explicit-shell-file-name shell-file-name)

(setq eshell-aliases-file "~/.emacs.conf/eshell_alias")
(setq eshell-history-size 2000)

;;(defun cygwin-shell()
;;  (interactive)

;;  (shell "*cygwin-shell*")
;;  (set-buffer-process-coding-system 'chinese-iso-8bit 'chinese-iso-8bit)
;;  (delete-other-windows)
;;)

;;(autoload 'bash-completion-dynamic-complete "bash-completion"  "BASH completion hook")
;;(add-hook 'shell-dynamic-complete-functions 'bash-completion-dynamic-complete)


;; enable cygwin clear, default set it does not work
(add-hook 'shell-mode-hook 'n-shell-mode-hook)
(defun n-shell-mode-hook ()
  "12Jan2002 - sailor, shell mode customizations."
  ;;  (local-set-key '[up] 'comint-previous-input)
  ;;  (local-set-key '[down] 'comint-next-input)
  ;;  (local-set-key '[(shift tab)] 'comint-next-matching-input-from-input)
  (setq comint-input-sender 'n-shell-simple-send)
  ;;  (helm-mode)
  (ivy-mode)
  (company-mode 0)
  (yas-minor-mode 0)
  ;;  (local-set-key "\C-c." (function rtags-find-symbol))  
  (ansi-color-for-comint-mode-on)
  )

(add-hook 'comint-mode-hook 'n-comint-mode-hook)
(defun n-comint-mode-hook ()
  (local-set-key "\C-c." (function rtags-find-symbol))
  )

(defun n-shell-simple-send (proc command)
  "17Jan02 - sailor. Various commands pre-processing before sending to shell."
  (cond
   ;; Checking for clear command and execute it.
   ((string-match "^[ \t]*clear[ \t]*$" command)
    (comint-send-string proc "\n")
    (erase-buffer)
    )
   ;; Checking for man command and execute it.
   ((string-match "^[ \t]*man[ \t]*" command)
    (comint-send-string proc "\n")
    (setq command (replace-regexp-in-string "^[ \t]*man[ \t]*" "" command))
    (setq command (replace-regexp-in-string "[ \t]+$" "" command))
    ;;(message (format "command %s command" command))
    (funcall 'man command)
    )
   ;; Send other commands to the default handler.
   (t (comint-simple-send proc command))
   )
  )

(add-hook 'term-mode-hook
          (lambda ()
	    (company-mode 0)
	    (yas-minor-mode 0)
	    (define-key term-raw-map "\M-o" 'hydra-my-first-menu/body)
	    (define-key term-raw-map "\C-cm" 'buffer-menu)
	    (define-key term-raw-map "\M-x" 'counsel-M-x)
	    
	    (define-key term-raw-map "\M-j" 'term-line-mode)
	    (define-key term-raw-map "\M-k" 'term-char-mode)	    	    
	    (local-set-key "\M-k" 'term-char-mode)
	    
	    (define-key term-raw-map "\M-p" 'term-send-up)	    	    
	    (define-key term-raw-map "\M-n" 'term-send-down)	    	    
;;	    (local-set-key "\M-p" 'term-previous-input)
;;	    (local-set-key "\M-n" 'term-next-input)
	    ))

(defun my-enter-shell ()
  (eshell)
)
;;   (let ((shell-buffer (get-buffer "*ansi-term*")))
;;     (if shell-buffer
;;	 (switch-to-buffer shell-buffer)
;;	 (ansi-term "/bin/bash"))
;;   ))

;;(global-set-key "\C-c\C-s" 'shell)
;;(global-set-key "\C-c\C-s" 'ansi-term)

(defun my/ivy-eshell-history ()
  (interactive)
  (let* ((start-pos (save-excursion (eshell-bol) (point)))
         (end-pos (point))
         (input (buffer-substring-no-properties start-pos end-pos))
         (command (ivy-read "Command: "
                            (delete-dups
                             (when (> (ring-size eshell-history-ring) 0)
                               (ring-elements eshell-history-ring)))
                            :initial-input input)))
    (setf (buffer-substring start-pos end-pos) command)
    (end-of-line)))

(add-hook 'eshell-mode-hook
          (lambda ()
            (eshell-cmpl-initialize)
	    ;;	    (n-shell-mode-hook)
			(require 'eshell-z)
			(require 'em-hist)
	    (ivy-mode)
	    (company-mode 0)
	    (yas-minor-mode 0)

	    (define-key eshell-mode-map "\M-r" 'ivy-resume)		
	    (define-key eshell-mode-map "\C-g"  #'(lambda ()
						    (interactive)
						    (hydra-keyboard-quit)
						    (my/ivy-eshell-history)))
	    (define-key eshell-mode-map (kbd "<tab>") 'completion-at-point)
	    (define-key eshell-mode-map (kbd "TAB") 'completion-at-point)
	    (define-key eshell-mode-map "\C-c\C-i" 'cscope-set-initial-directory)
	    (define-key eshell-mode-map (kbd "C-c TAB") 'cscope-set-initial-directory)
	    (define-key eshell-mode-map (kbd "C-c <tab>") 'cscope-set-initial-directory)
	    ;;            (define-key eshell-mode-map [remap eshell-pcomplete] 'helm-esh-pcomplete)
					;            (define-key eshell-mode-map (kbd "M-p") 'helm-eshell-history)
	    ;;            (define-key eshell-mode-map "\C-c\C-i" 'cscope-set-initial-directory)	    
	    ))

(require 'em-tramp) ; to load eshell’s sudo

(defun my-eshell/z (&rest args)
  "cd to frequent directory in eshell."
  (hydra-keyboard-quit)
  (eshell/z args)
  )

;;(eval-after-load 'eshell
;;  '(require 'eshell-autojump nil t))
;; 
;;(setq eshell-last-dir-ring-size 500)
;; 
;;(defun eshell/jj (&rest args)           ; all but first ignored
;;  (setq args (eshell-flatten-list args))
;;  (let ((path (car args))
;;        (candidates1 (eshell-autojump-candidates))
;;        (case-fold-search (eshell-under-windows-p))
;; 	candidates
;; 	path1
;;        result)
;; 
;;    (mapcar 
;;     (lambda (x)
;;       (setq path (concat path ".*" (format "%s" x))))
;;     (cdr args))
;; 
;;;;    (if (not (string-match ".*/$" path))
;;;;		(setq path1 (concat path "/")))
;;    
;;    (setq path1 (concat path "[^/]*/$"))
;; 
;;    (when (not path)
;;      (setq path 10))
;;    (if (and (integerp path) (> path 0))
;;        (progn
;;          (let ((n (nthcdr (1- path) candidates1)))
;;            (when n
;;              (setcdr n nil)))
;;          (eshell-lisp-command (mapconcat 'identity candidates1 "\n")))
;; 
;;      (progn
;; 	(setq candidates candidates1)
;; 	
;; 	(while (and candidates1 (not result))
;;          (if (string-match path1 (car candidates1))
;;              (setq result (car candidates1))
;;            (setq candidates1 (cdr candidates1))))
;; 
;; 	(if (not result)
;; 	    (while (and candidates (not result))
;;              (if (string-match path (car candidates))
;; 		  (setq result (car candidates))
;; 		(setq candidates (cdr candidates)))))
;; 	(eshell/cd result)))))

;; 全屏显示shell
;;(eshell)
;;(delete-other-windows)

(add-hook 'after-init-hook (lambda ()
;;			     (my-enter-shell)
;;			     (delete-other-windows)
			     (evil-mode)
;;			     (hydra-my-move/body)
			     ))



(defun aweshell-clear-buffer ()
  "Clear eshell buffer."
  (interactive)
  (let ((inhibit-read-only t))
    (erase-buffer)
    (eshell-send-input)))

;; Make cat with syntax highlight.
(defun aweshell-cat-with-syntax-highlight (filename)
  "Like cat(1) but with syntax highlighting."
  (let ((existing-buffer (get-file-buffer filename))
        (buffer (find-file-noselect filename)))
    (eshell-print
     (with-current-buffer buffer
       (if (fboundp 'font-lock-ensure)
           (font-lock-ensure)
         (with-no-warnings
           (font-lock-fontify-buffer)))
       (buffer-string)))
    (unless existing-buffer
      (kill-buffer buffer))
    nil))

(advice-add 'eshell/cat :override #'aweshell-cat-with-syntax-highlight)

(defun aweshell-emacs (&rest args)
  "Open a file in Emacs with ARGS, Some habits die hard."
  (if (null args)
      ;; If I just ran "emacs", I probably expect to be launching
      ;; Emacs, which is rather silly since I'm already in Emacs.
      ;; So just pretend to do what I ask.
      (bury-buffer)
    ;; We have to expand the file names or else naming a directory in an
    ;; argument causes later arguments to be looked for in that directory,
    ;; not the starting directory
    (mapc #'find-file (mapcar #'expand-file-name (eshell-flatten-list (reverse args))))))

(defalias 'eshell/e 'aweshell-emacs)
