(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/rtags")

;;防止helm加载很慢
(setq tramp-ssh-controlmaster-options "-o ControlMaster=auto -o ControlPath='tramp.%%C' -o ControlPersist=no")

(defun revert-all-buffers ()
  "Refreshes all open buffers from their respective files"
  (interactive)
  (let* ((list (buffer-list))
	 (buffer (car list)))
	(while buffer
	  (when (and (buffer-file-name buffer)
		 (not (buffer-modified-p buffer)))
	(set-buffer buffer)
	(revert-buffer t t t))
	  (setq list (cdr list))
	  (setq buffer (car list))))
  (message "Refreshed open files"))

;;(load "desktop")
;;(desktop-load-default)
;;(desktop-read)

(setq linum-format "%2d| ")
(setq linum-eager nil)

;;设置Shift+TAB切换至上个buffer
(global-set-key (kbd "<backtab>") #'(lambda ()
				      (interactive)
				      (switch-to-buffer (other-buffer (current-buffer) 1))))
;;(defun backward-button (&optional arg try-vscroll)
;;  (interactive)
;;  (switch-to-buffer (other-buffer (current-buffer) 1)))

(global-set-key (kbd "M-n") 'er/expand-region)
(global-set-key (kbd "C-M-n") 'er/expand-region)

;; 不要自动补齐括号
;; (electric-pair-mode 1)
;; 高亮括号配对
(show-paren-mode t)
(setq show-paren-style 'parenthesis)
;; mini buffer 高度
(setq max-mini-window-height  0.5)
(set-frame-font "-adobe-Source Code Pro-normal-normal-normal-*-*-*-*-*-m-0-iso10646-1")

(setq avy-background t)
(setq avy-keys (number-sequence ?a ?z))

(define-prefix-command 'meta_m)
(global-set-key "\M-m" 'meta_m)
(global-set-key "\M-ml" 'ace-jump-line-mode)
(global-set-key "\M-mp" 'ace-jump-mode)
(global-set-key "\M-mr" 'cua-rectangle-mark-mode)
(require 'multiple-cursors)
(defun mymc_start (&optional id)
  "开启multiple cursors"
  (interactive "p")
  (mc/maybe-multiple-cursors-mode))
(defun mymc_set (&optional id)
  "设置multiple cursors"
  (interactive "p")
  (let ((existing (mc/fake-cursor-at-point (point))))
	(if existing
	(mc/remove-fake-cursor existing)
	  (mc/create-fake-cursor-at-point)
	  )))
(global-set-key "\M-ms" 'mymc_set)
(global-set-key "\M-mo" 'mymc_start)
(global-set-key "\M-mq" 'mc/keyboard-quit)

(global-set-key "\M-mc" #'aya-create)
(global-set-key "\M-me" #'aya-expand)

(require 'browse-kill-ring)
(global-set-key [(control c)(k)] 'browse-kill-ring)
(browse-kill-ring-default-keybindings)


(setq normal-erase-is-backspace-mode 1)

(require 'yasnippet)
(add-to-list 'yas-snippet-dirs yas-installed-snippets-dir)
(add-to-list 'yas-snippet-dirs "~/.emacs.conf/snippet")
(yas/global-mode 1)
;;(require 'auto-complete-config)
;;(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
;;(ac-config-default)

(tool-bar-mode 0)
(menu-bar-mode 0)

(define-key Buffer-menu-mode-map " " nil)

;;(require 'bookmark+)
;;(setq bookmark-save-flag 1)

(require 'hideif)
(require 'xcscope)
(require 'company)

(setq time-stamp-active t)
(setq time-stamp-warn-inactive t)
(setq time-stamp-format "%:u %02m/%02d/%04y %02h%02m%02s")

(display-time-mode 1)
(setq display-time-24hr-format t)
(setq display-time-day-and-date t)
(setq display-time-interval 10)

;;Display the pictures in Emacs
(auto-image-file-mode)

;;Directly open tgz file
(auto-compression-mode 1)

(mouse-avoidance-mode 'none)

(blink-cursor-mode 1)

(setq resize-mini-windows t)

;;Display the column number in mini-bar
(column-number-mode t)

(transient-mark-mode 1)

(setq inhibit-startup-message t)

(setq kill-ring-max 200)

(put 'narrow-to-region 'disabled nil)

(split-window-vertically)


(global-set-key "\C-xm" 'imenu)
(global-set-key "\M-_" 'repeat)
(global-set-key "\C-xc" 'set-mark-command)

(global-set-key "\C-x\C-t" 'toggle-read-only)
(global-set-key "\C-cm" 'buffer-menu)
(global-set-key "\C-x " 'set-mark-command)

;;(global-set-key "\C-h" 'delete-char)
;;(global-set-key "\C-h\C-hk" 'describe-key)
;;(global-set-key "\C-h\C-hw" 'where-is)
(global-set-key "\C-xg" 'goto-line)
(global-set-key "\M-i" 'evil-mode)
(global-set-key "\C-xj" 'jump-to-register)

;;(defun my_quit ()
;;  (interactive)
;;  (if (minibufferp)
;;      (minibuffer-keyboard-quit)
;;    (keyboard-quit)))
;;
;;(global-set-key "\C-o" 'my_quit)
;;(global-set-key "\M- " 'my_quit)
;;(define-key company-active-map "\C-o" 'company-abort)
;;(define-key company-active-map "\M- " 'company-abort)

(global-set-key "\C-xi" 'ace-window)
(global-set-key [f1] 'other-window)
(global-set-key [(f3)] 'goto-line)
;;(global-set-key "\C-c\C-g" 'cscope-find-global-definition)
(global-set-key "\C-cg" 'cscope-find-global-definition)
(global-set-key "\C-c\C-i" 'cscope-set-initial-directory)
(global-set-key "\C-ci" 'cscope-pop-mark)
(global-set-key (kbd "C-x RET g") 'cscope-find-global-definition)
(global-set-key "\C-c\C-e" 'cscope-find-called-functions)
(global-set-key "\C-cc" 'cscope-find-functions-calling-this-function)
;;(global-set-key "\C-c\C-e" 'cscope-find-egrep-pattern)
(global-set-key "\C-ce" 'cscope-find-egrep-pattern)
(global-set-key "\C-ch" 'helm-cscope-find-this-text-string)

(global-set-key "\C-cn" 'scroll-other-window)
(global-set-key "\C-cp" 'scroll-other-window-down)

;;(global-set-key "\C-c\C-i" 'cscope-find-files-including-file)
(global-set-key "\C-cf" 'cscope-find-this-file)
(global-set-key "\C-c\C-e" 'cscope-find-egrep-pattern)

(global-set-key "\C-ct" 'cscope-find-this-text-string)
(global-set-key "\C-cs" 'cscope-find-this-symbol)

(add-hook 'write-file-hooks 'time-stamp)

(load "~/.emacs.conf/my-c-config.lisp")
(load "~/.emacs.conf/my-go-config.lisp")

(defun refresh-file ()
  (interactive)
  (revert-buffer t (not (buffer-modified-p)) t))

(global-set-key "\C-x\C-r" 'refresh-file)
;;(global-set-key "\C-x\C-g" 'gdb-many-windows)

;;(gdb-many-windows t)

;;(require 'color-theme)
;;(color-theme-initialize)
;;(color-theme-taylor)
;;(color-theme-calm-forest)
;;hober
;;midnight
;;oswald
;;billw
;;calm-forest

(setq org-src-fontify-natively t)
(org-babel-do-load-languages
 'org-babel-load-languages
 '(
;;   (sh . t)
   (python . t)
   (R . t)
   (ruby . t)
   (ditaa . t)
   (dot . t)
   (octave . t)
   (sqlite . t)
   (perl . t)
   (C . t)
   (plantuml . t)
   ))

(setq org-plantuml-jar-path
	  (expand-file-name "~/.emacs.d/java/plantuml.jar"))

;;(global-set-key "\C-xc" 'auto-complete)

;;(require 'auto-complete-clang)
;;(setq ac-clang-auto-save nil)
;;(setq ac-auto-start t)
;;(setq ac-delay 1)
;;(setq ac-quick-help-delay 0.5)
;; (ac-set-trigger-key "TAB")
;; (define-key ac-mode-map  [(control tab)] 'auto-complete)
;;(define-key ac-mode-map  [(control tab)] 'auto-complete)

;;(defun my-ac-config ()
;;  (setq-default ac-sources '(ac-source-abbrev ac-source-dictionary ac-source-words-in-same-mode-buffers))
;;  (add-hook 'emacs-lisp-mode-hook 'ac-emacs-lisp-mode-setup)
;;  ;; (add-hook 'c-mode-common-hook 'ac-cc-mode-setup)
;;  (add-hook 'ruby-mode-hook 'ac-ruby-mode-setup)
;;  (add-hook 'css-mode-hook 'ac-css-mode-setup)
;;  (add-hook 'auto-complete-mode-hook 'ac-common-setup)
;;  (global-auto-complete-mode t))
;;(defun my-ac-cc-mode-setup ()
;;  (setq ac-sources (append '(ac-source-clang ac-source-yasnippet) ac-sources)))
;;(add-hook 'c-mode-common-hook 'my-ac-cc-mode-setup)
;;ac-source-gtags
;;(my-ac-config)

;;echo "" | g++ -v -x c++ -E -
;;(setq ac-clang-flags
;;      (mapcar (lambda (item)(concat "-I" item))
;;              (split-string
;;               "
;; /usr/include/c++/5
;; /usr/include/x86_64-linux-gnu/c++/5
;; /usr/include/c++/5/backward
;; /usr/lib/gcc/x86_64-linux-gnu/5/include
;; /usr/local/include
;; /usr/lib/gcc/x86_64-linux-gnu/5/include-fixed
;; /usr/include/x86_64-linux-gnu
;; /usr/include
;; /usr/include/linux
;; /usr/include/diet
;; /home/jacktang/svnroot/XGame/Server/comm_include
;; /home/jacktang/svnroot/XGame/Server/comm_lib/include
;; /home/jacktang/svnroot/XGame/Server/game_srv
;; /home/jacktang/svnroot/XGame/Server/game_srv/so_game_srv
;; /home/jacktang/svnroot/XGame/Server/proto
;; /home/jacktang/svnroot/XGame/Server/thirdlib/libevent/include
;; /home/jacktang/svnroot/XGame/Server/thirdlib/libevent
;; /home/jacktang/svnroot/XGame/Server/comm_game
;; /home/jacktang/svnroot/XGame/Server/excel_data
;;"
;;)))


;;(global-set-key "\M-,"   'etags-select-find-tag)
;;(global-set-key "\M-m"   'helm-etags-select)
;;(global-set-key  "\C-x\C-h"    'helm-find-files)
;; Don't ask before rereading the TAGS files if they have changed
(setq tags-revert-without-query t)
;; Don't warn when TAGS files are large
(setq large-file-warning-threshold nil)
(setq etags-update-cmd "find . -type f | grep \".*\\.\\(c\\|h\\|cpp\\)$\" | xargs ctags -e")

;;(require 'breadcrumb)
;;(setq bc-bookmark-file "~/vgame.bmk")
;;(global-set-key "\M-p"      'bc-previous)
;;(global-set-key "\M-n"   'bc-next)
;;(global-set-key [M-up]      'bc-local-previous)
;;(global-set-key [M-down]    'bc-local-next)
;;(global-set-key "\C-cl"  'bc-list)
;;(global-set-key  "\C-cj"    'bc-set)
;; bc-file
;; bc-reload


;;; use popup menu for yas-choose-value
(require 'popup)

;; add some shotcuts in popup menu mode
(define-key popup-menu-keymap (kbd "M-n") 'popup-next)
(define-key popup-menu-keymap (kbd "TAB") 'popup-next)
(define-key popup-menu-keymap (kbd "<tab>") 'popup-next)
(define-key popup-menu-keymap (kbd "<backtab>") 'popup-previous)
(define-key popup-menu-keymap (kbd "M-p") 'popup-previous)

(defun yas-popup-isearch-prompt (prompt choices &optional display-fn)
  (when (featurep 'popup)
	(popup-menu*
	 (mapcar
	  (lambda (choice)
		(popup-make-item
		 (or (and display-fn (funcall display-fn choice))
			 choice)
		 :value choice))
	  choices)
	 :prompt prompt
	 ;; start isearch mode immediately
	 :isearch t
	 )))
(setq yas-prompt-functions '(yas-popup-isearch-prompt yas-ido-prompt yas-no-prompt))

;; 终端箭头不见了找这两个变量 overlay-arrow-position   overlay-arrow-string
;; 非终端的找 fringe

(if my_use-rtags
	(progn
	  ;;(add-to-list 'exec-path (expand-file-name "~/gitroot/rtags/bin")) ;; path to rdm/rc
	  ;;(add-to-list 'load-path (expand-file-name "~/gitroot/rtags/src")) ;; path to rtags.el
	  (require 'rtags)
	  (rtags-start-process-unless-running)
	  ;;(require 'helm-rtags)
	  ;;(require 'flycheck-rtags)
	  (setq rtags-autostart-diagnostics nil)
	  (setq rtags-use-bookmarks nil)
	  (setq rtags-multiple-targets nil)
	  (setq helm-company-candidate-number-limit 100000)
	  (setq helm-candidate-number-limit nil)
	  ;;(rtags-diagnostics)
	  ;;(setq rtags-completions-enabled t)
	  ;;(push 'company-rtags company-backends)
	  (global-company-mode)
	  ;;(setq rtags-use-helm t)
	  (require 'ivy-rtags)
	  (setq rtags-display-result-backend 'ivy)

;;      (defun my-flycheck-rtags-setup ()
;;	(flycheck-select-checker 'rtags)
;;	(setq-local flycheck-highlighting-mode nil) ;; RTags creates more accurate overlays.
;;	(setq-local flycheck-check-syntax-automatically nil))
;;      (add-hook 'c-mode-hook #'my-flycheck-rtags-setup)
;;      (add-hook 'c++-mode-hook #'my-flycheck-rtags-setup)
;;      (add-hook 'objc-mode-hook #'my-flycheck-rtags-setup)

	  ;;(setq rtags-socket-file "/home/jacktang/.rdm")

	  (global-set-key (kbd "M-.") (function rtags-find-symbol-at-point))
	  (global-set-key (kbd "M-,") (function rtags-find-references-at-point))
	  (global-set-key (kbd "C-.") (function rtags-find-symbol))
	  (global-set-key (kbd "C-,") (function rtags-find-references))
	  (global-set-key (kbd "C-<") (function rrtags-find-virtuals-at-point))
	  ;;(global-set-key (kbd "M-i") (function rtags-imenu))
	  (global-set-key "\C-c." (function rtags-find-symbol))
	  (global-set-key "\C-c," (function rtags-find-references))
	  (global-set-key "\C-cu" (function rtags-location-stack-back))
	  ;;(global-set-key "\C-ci" (function rtags-location-stack-forward))
	  (global-set-key "\M-mi" #'(lambda () (interactive) (ivy-rtags-read)))
;; 	  (global-set-key (kbd "M-;") #'(lambda () (interactive)
;; 					  (rtags-find-file)
;; 					  (delete-window)
;; 					  (ivy-rtags-read)))
	  (rtags-enable-standard-keybindings)
	  ))

(require 'company)
(require 'company-c-headers)
;;(add-hook 'after-init-hook 'global-company-mode)
(setq company-backends (delete 'company-semantic company-backends))
(setq company-backends (delete 'company-capf company-backends))
(setq company-backends (delete 'company-clang company-backends))
;;(add-to-list 'company-backends 'company-jedi)
;;(setq rtags-completions-enabled t)
;;(add-to-list  'company-backends 'company-rtags)
;;(add-to-list 'company-backends 'company-irony-c-headers)
(add-to-list 'company-backends 'company-c-headers)
(if my_use-irony
  (add-to-list
	'company-backends '(company-irony-c-headers company-irony)))

(add-to-list 'company-backends 'company-go)

(add-to-list 'company-c-headers-path-system "/usr/include/c++/5/")
(add-to-list 'company-c-headers-path-system "/usr/include/c++/4.8/")
(global-set-key "\C-xc" (function company-complete))
;;(global-set-key "\C-x." (function helm-company))
(global-set-key "\C-x." 'counsel-company)
(global-set-key "\C-x," 'company-tabnine)

;;(semantic-mode 1)
;;(global-semantic-idle-summary-mode 1)
(winner-mode)
(delete-selection-mode)

(global-set-key "\C-s" 'helm-occur)
(eval-after-load "helm"
  '(define-key helm-map (kbd "C-l") 'ace-jump-helm-line))

;;(eval-after-load "conf-mode"
;;  (lambda ()
;;    (define-key conf-mode-map "\C-c\C-s" 'shell)
;;    ))
;;
;;(eval-after-load "shell-script-mode"
;;  (lambda ()
;;    (define-key sh-mode-map "\C-c\C-s" 'shell)
;;    ))

;; (eval-after-load "go-mode"
;;   (lambda ()
;;   (define-key go-mode-map (kbd "M-.") 'godef-jump)
;;   (define-key go-mode-map "\C-c\C-c"  'comment-or-uncomment-region)
;; ))

;; (defun my-go-mode-common-hook ()
;;   (if (functionp 'display-line-numbers-mode)
;; 	  (display-line-numbers-mode)
;; 	(linum-mode 1))
;; )
;; (add-hook 'go-mode-hook 'my-go-mode-common-hook)

;;浏览器设置
;;(setq browse-url-browser-function 'w3m)
(setq browse-url-browser-function 'browse-url-default-browser)
(setq markdown-command '"pandoc -s --highlight-style zenburn")

;;高亮
(require 'symbol-overlay)
(global-set-key (kbd "M-i") 'symbol-overlay-put)


(require 'xref)
(global-set-key "\C-co" (function xref-pop-marker-stack))
;;(global-set-key "\C-co" (function counsel-gtags-go-backward))
(setq xref-after-return-hook (delete 'xref-pulse-momentarily xref-after-return-hook ))

;; 避免卡住放在最后面
(setq auto-save-hook nil)

;; 避免=>被干掉
;;(add-hook 'find-file-hook #'(lambda () (setq overlay-arrow-string "=>")) t)
;;(global-set-key "\C-c\M->"
;;		#'(lambda ()
;;			(interactive)
;;			(setq overlay-arrow-string "=>")
;;			))
(defun cscope-cleanup-overlay-arrow ()
  (when overlay-arrow-position
	(set-marker overlay-arrow-position nil)
	(setq overlay-arrow-position nil
		  )))


;; tab补全
(defun check-expansion ()
  (save-excursion
	(if (looking-at "\\_>") t
	  (backward-char 1)
	  (if (looking-at "\\.") t
	(backward-char 1)
	(if (looking-at "::") t
	  (if (looking-at "->") t nil))))))
(defun do-yas-expand ()
  (let ((yas/fallback-behavior 'return-nil))
	(yas/expand)))

;;(defun tab-indent-or-complete ()
;;  (interactive)
;;;;  (message "major-mode = %s" major-mode)
;;  (if (eq major-mode 'inferior-python-mode)
;;      (python-shell-completion-complete-or-indent)
;;  (if (or (eq major-mode 'shell-mode) (eq major-mode 'gud-mode) )
;;      (completion-at-point)
;;    (if (minibufferp)
;;	(minibuffer-complete)
;;      ;;    (if (or (not yas/minor-mode)
;;      ;;		(null (do-yas-expand)))
;;      (if (check-expansion)
;;	  (company-complete-common)
;;	(indent-for-tab-command))))))
;;(global-set-key (kbd "TAB") 'tab-indent-or-complete)
;;(define-key c-mode-base-map (kbd "TAB") 'tab-indent-or-complete)
;;(define-key c++-mode-map (kbd "TAB") 'tab-indent-or-complete)
;;(define-key c-mode-map (kbd "TAB") 'tab-indent-or-complete)
;;(define-key yas-minor-mode-map (kbd "TAB") 'tab-indent-or-complete)
;;(global-set-key (kbd "<tab>") 'tab-indent-or-complete)
;;(define-key c-mode-base-map (kbd "<tab>") 'tab-indent-or-complete)
;;(define-key c++-mode-map (kbd "<tab>") 'tab-indent-or-complete)
;;(define-key c-mode-map (kbd "<tab>") 'tab-indent-or-complete)
;;(define-key yas-minor-mode-map (kbd "<tab>") 'tab-indent-or-complete)

(defun tab-indent-or-complete ()
  (interactive)
  (if (region-active-p)
      (clang-format-region (region-beginning) (region-end))
	(if (eq (line-beginning-position) (line-end-position))
		(indent-for-tab-command)
      (if (check-expansion)
		  (company-complete-common)
		(clang-format-region (line-beginning-position) (line-end-position))
		;;	  (indent-for-tab-command)
		))))

(setq tramp-ssh-controlmaster-options
 (concat
   "-o ControlPath=/tmp/ssh-ControlPath-%%r@%%h:%%p "
   "-o ControlMaster=auto -o ControlPersist=yes"))

(setq source_code_file_type '("\\.c$" "\\.cpp$" "\\.h$" "\\.lua$" "\\.js$" "\\.py" "\\.ts" "\\.hpp" "\\.proto" "\\.go" "\\.conf" "\\.lisp"))
(defun check_source_code_file_type (str)
  (let ((ret-value nil))
  (cl-loop for t1 in source_code_file_type do
	   (if (string-match t1 str)
		   (setq ret-value t)
		 ))
  ret-value
  ))

(defun close_all_source_code_file ()
	(interactive)
	(let ((t_name nil))
	  (cl-loop for buf in (buffer-list) do
		   (setq t_name (buffer-file-name buf))
		   (if (and t_name (check_source_code_file_type t_name))
		   ;;		   (message "close buff %s" buf)
		   (kill-buffer buf)
		 ))))

(load "~/.emacs.conf/mode-line.conf")
(load "~/.emacs.conf/show-company-num.conf")
(load "~/.emacs.conf/my-dired.lisp")

;;自动保存
;;(when (>= emacs-major-version 26)
;;  (auto-save-visited-mode))



(load "~/.emacs.conf/my-ivy-config.lisp")
(load "~/.emacs.conf/my-web-python-config.lisp")
(load "~/.emacs.conf/my-paredit.lisp")

(setq tab-width 4)
