(defun pre-buffer-name ()
(let* ((bury-or-kill nil)
       (window nil)
       (window (window-normalize-window window t))
	 (frame (window-frame window))
	 (old-buffer (window-buffer window))
	 ;; Save this since it's destroyed by `set-window-buffer'.
	 (next-buffers (window-next-buffers window))
         (pred (frame-parameter frame 'buffer-predicate))
	 entry new-buffer killed-buffers visible)
    (when (window-minibuffer-p window)
      ;; Don't switch in minibuffer window.
      (unless (setq window (minibuffer-selected-window))
	(error "Window %s is a minibuffer window" window)))

    (when (window-dedicated-p window)
      ;; Don't switch in dedicated window.
      (error "Window %s is dedicated to buffer %s" window old-buffer))

    (catch 'found
      ;; Scan WINDOW's previous buffers first, skipping entries of next
      ;; buffers.
      (dolist (entry (window-prev-buffers window))
	(when (and (setq new-buffer (car entry))
		   (or (buffer-live-p new-buffer)
		       (not (setq killed-buffers
				  (cons new-buffer killed-buffers))))
		   (not (eq new-buffer old-buffer))
                   (or (null pred) (funcall pred new-buffer))
		   ;; When BURY-OR-KILL is nil, avoid switching to a
		   ;; buffer in WINDOW's next buffers list.
		   (or bury-or-kill (not (memq new-buffer next-buffers))))
	  (if (and (not switch-to-visible-buffer)
		   (get-buffer-window new-buffer frame))
	      ;; Try to avoid showing a buffer visible in some other
	      ;; window.
	      (setq visible new-buffer)
;;	    (set-window-buffer-start-and-point
	    ;;	     window new-buffer (nth 1 entry) (nth 2 entry))
;;	    	(message "cccc %s" new-buffer)
	    (throw 'found t))))
      ;; Scan reverted buffer list of WINDOW's frame next, skipping
      ;; entries of next buffers.  Note that when we bury or kill a
      ;; buffer we don't reverse the global buffer list to avoid showing
      ;; a buried buffer instead.  Otherwise, we must reverse the global
      ;; buffer list in order to make sure that switching to the
      ;; previous/next buffer traverse it in opposite directions.
      (dolist (buffer (if bury-or-kill
			  (buffer-list frame)
			(nreverse (buffer-list frame))))
	(when (and (buffer-live-p buffer)
		   (not (eq buffer old-buffer))
                   (or (null pred) (funcall pred buffer))
		   (not (eq (aref (buffer-name buffer) 0) ?\s))
		   (or bury-or-kill (not (memq buffer next-buffers))))
	  (if (and (not switch-to-visible-buffer)
		   (get-buffer-window buffer frame))
	      ;; Try to avoid showing a buffer visible in some other window.
	      (unless visible
		(setq visible buffer))
	    (setq new-buffer buffer)
	    ;;	    (set-window-buffer-start-and-point window new-buffer)
;;	    	(message "dddd %s" new-buffer)
	    (throw 'found t))))
      (unless bury-or-kill
	;; Scan reverted next buffers last (must not use nreverse
	;; here!).
	(dolist (buffer (reverse next-buffers))
	  ;; Actually, buffer _must_ be live here since otherwise it
	  ;; would have been caught in the scan of previous buffers.
	  (when (and (or (buffer-live-p buffer)
			 (not (setq killed-buffers
				    (cons buffer killed-buffers))))
		     (not (eq buffer old-buffer))
                     (or (null pred) (funcall pred buffer))
		     (setq entry (assq buffer (window-prev-buffers window))))
	    (setq new-buffer buffer)
;;	    (message "aaaaa %s" new-buffer)
;;	    (set-window-buffer-start-and-point
;;	     window new-buffer (nth 1 entry) (nth 2 entry))
	    (throw 'found t))))

      ;; Show a buffer visible in another window.
      (when visible
 	(setq new-buffer visible)
	;; 	(set-window-buffer-start-and-point window new-buffer)
;;	(message "bbbbb %s" new-buffer)
	))
    
    ;; Return new-buffer.
    (buffer-name new-buffer)
    ))


(defun next-buffer-name ()
  (let* ((window nil)
	 (window (window-normalize-window window t))
	 (frame (window-frame window))
	 (old-buffer (window-buffer window))
	 (next-buffers (window-next-buffers window))
         (pred (frame-parameter frame 'buffer-predicate))
	 new-buffer entry killed-buffers visible)
    (when (window-minibuffer-p window)
      ;; Don't switch in minibuffer window.
      (unless (setq window (minibuffer-selected-window))
	(error "Window %s is a minibuffer window" window)))

    (when (window-dedicated-p window)
      ;; Don't switch in dedicated window.
      (error "Window %s is dedicated to buffer %s" window old-buffer))

    (catch 'found
      ;; Scan WINDOW's next buffers first.
      (dolist (buffer next-buffers)
	(when (and (or (buffer-live-p buffer)
		       (not (setq killed-buffers
				  (cons buffer killed-buffers))))
		   (not (eq buffer old-buffer))
                   (or (null pred) (funcall pred buffer))
		   (setq entry (assq buffer (window-prev-buffers window))))
	  (setq new-buffer buffer)
;;	  (set-window-buffer-start-and-point
;;	   window new-buffer (nth 1 entry) (nth 2 entry))
	  (throw 'found t)))
      ;; Scan the buffer list of WINDOW's frame next, skipping previous
      ;; buffers entries.
      (dolist (buffer (buffer-list frame))
	(when (and (buffer-live-p buffer)
		   (not (eq buffer old-buffer))
                   (or (null pred) (funcall pred buffer))
		   (not (eq (aref (buffer-name buffer) 0) ?\s))
		   (not (assq buffer (window-prev-buffers window))))
	  (if (and (not switch-to-visible-buffer)
		   (get-buffer-window buffer frame))
	      ;; Try to avoid showing a buffer visible in some other window.
	      (setq visible buffer)
	    (setq new-buffer buffer)
;;	    (set-window-buffer-start-and-point window new-buffer)
	    (throw 'found t))))
      ;; Scan WINDOW's reverted previous buffers last (must not use
      ;; nreverse here!)
      (dolist (entry (reverse (window-prev-buffers window)))
	(when (and (setq new-buffer (car entry))
		   (or (buffer-live-p new-buffer)
		       (not (setq killed-buffers
				  (cons new-buffer killed-buffers))))
		   (not (eq new-buffer old-buffer))
                   (or (null pred) (funcall pred new-buffer)))
	  (if (and (not switch-to-visible-buffer)
		   (get-buffer-window new-buffer frame))
	      ;; Try to avoid showing a buffer visible in some other window.
	      (unless visible
		(setq visible new-buffer))
;;	    (set-window-buffer-start-and-point
;;	     window new-buffer (nth 1 entry) (nth 2 entry))
	    (throw 'found t))))

      ;; Show a buffer visible in another window.
      (when visible
	(setq new-buffer visible)
;;	(set-window-buffer-start-and-point window new-buffer)
	))

    ;; Remove `new-buffer' from and restore WINDOW's next buffers.
;;    (set-window-next-buffers window (delq new-buffer next-buffers))
    ;; Return new-buffer.
    (buffer-name new-buffer)
    ))

(setq my-hydra-mode (propertize "" 'face '(:foreground "#575900")))
(put 'my-hydra-mode 'risky-local-variable t)				 
(delete 'mode-line-end-spaces mode-line-format)
(delete '(vc-mode vc-mode) mode-line-format)
(delete 'mode-line-misc-info mode-line-format)
(setq-default mode-line-format (append mode-line-format '(my-hydra-mode)))
(setq hydra-is-helpful nil)

(setq my-last-buffer-name '(:eval (format " (%s|%s) " (pre-buffer-name) (next-buffer-name))))
(put 'my-last-buffer-name 'risky-local-variable t)				 
(setq-default mode-line-format (append mode-line-format '(my-last-buffer-name)))

