(defvar point-stack nil)
(defvar point-cur nil)
(defun point-stack-push ()
  "Push current point in stack."
  (interactive)
  (message "Location marked.")
  (setq point-cur 0)
  (setq point-stack (cons (list (current-buffer) (point)) point-stack)))

(defun point-stack-pop ()
  "Pop point from stack."
  (interactive)
  (if (null point-stack)
      (message "Stack is empty.")
    (switch-to-buffer (caar point-stack))
    (goto-char (cadar point-stack))
    (setq point-cur 0)    
    (setq point-stack (cdr point-stack))))

(defun point-stack-clear ()
  "clear point from stack."
  (interactive)
  (setq point-cur nil)
  (setq point-stack nil))

(defun point-stack-forward ()
  "forward point from stack."
  (interactive)
  (let (tmp)
  (if (or (null point-stack)
	  (null point-cur))
      (message "Stack is empty.")
    (if (eq 0 point-cur)
	(message "Stack at top")
      (setq point-cur (- point-cur 1))
      (setq tmp (nth point-cur point-stack))
      (switch-to-buffer (car tmp))
      (goto-char (cadr tmp))
  ))))

(defun point-stack-backward ()
  "backward point from stack."
  (interactive)
  (let (tmp)
  (if (or (null point-stack)
	  (null point-cur))
      (message "Stack is empty.")
    (if (<= (length point-stack) (+ 1 point-cur))    
	(message "Stack at bottom")
      (setq point-cur (+ point-cur 1))
      (setq tmp (nth point-cur point-stack))
      (switch-to-buffer (car tmp))
      (goto-char (cadr tmp))
  ))))

(defun point-stack-delete ()
  "delete current point from stack."
  (interactive)
  (let ((l) (t1) (t2) (l1) (l2))
  (if (or (null point-stack)
	  (null point-cur))
      (message "Stack is empty.")
    (setq l (length point-stack))
    (if (<= l 1)
	(point-stack-clear)
;;      (message "aaaa l = %s" l)
      (setq l1 (- l (- point-cur 0)))
      (if (< l1 0)
	  (setq t1 nil)
	(setq t1 (butlast point-stack l1)))
;;      (message "t1 = %s, l1 = %s" t1 l1)
      (setq t2 (nthcdr (+ point-cur 1) point-stack))
;;      (message "t2 = %s, point-cur = %s" t2 point-cur)      
      (setq point-stack (append t1 t2)
  )))))
