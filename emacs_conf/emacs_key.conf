(define-key key-translation-map (kbd "M-SPC") (kbd "C-g"))
(define-key key-translation-map (kbd "C-o") (kbd "C-g"))
(define-key key-translation-map (kbd "s-SPC") (kbd "C-g"))

(require 'itail)
(define-key itail-keymap (kbd "g") 'itail-add-grep)
(define-key itail-keymap (kbd "f") 'itail-toggle-filter)
(define-key itail-keymap (kbd "c") 'itail-clear)
(define-key itail-keymap (kbd "s") 'itail-show-filters)
(define-key itail-keymap (kbd "r") 'itail-remove-all-filters)
(define-key itail-keymap (kbd "h") 'itail-highlight)
(define-key itail-keymap (kbd "u") 'itail-unhighlight)
(define-key itail-keymap (kbd "k") 'itail-kill)

(defvar hydra-stack nil)

(defun hydra-push (expr)
  (push `(lambda () ,expr) hydra-stack))

(defun hydra-pop ()
  (interactive)
  (let ((x (pop hydra-stack)))
    (when x
      (funcall x))))

(global-set-key
   (kbd "M-o")
   (defhydra hydra-my-first-menu (:pre (progn (setq my-hydra-mode (propertize "root" 'face '(:foreground "orange")))
					      (force-mode-line-update))
         			  :before-exit (progn (setq my-hydra-mode "")(force-mode-line-update))
				  :idle 0
				  :color teal)
"
_a_: ace       _c_: cscope _e_: etags _f_: file   _o_: org  _r_: rtags   
_y_: yasnippet _m_: move   _i_: ivy   _b_: buffer _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
     ("y" (progn
         (hydra-my-yas/body)
         (hydra-push '(hydra-my-first-menu/body))))
     ("a" (progn
         (hydra-my-ace/body)
         (hydra-push '(hydra-my-first-menu/body))))
     ("o" (progn
         (hydra-my-org/body)
         (hydra-push '(hydra-my-first-menu/body))))
     ("m" (progn
         (hydra-my-move/body)
         (hydra-push '(hydra-my-first-menu/body))))
     ("f" (progn
         (hydra-my-file/body)
         (hydra-push '(hydra-my-first-menu/body))))     
     ("e" (progn
         (hydra-my-etags/body)
         (hydra-push '(hydra-my-first-menu/body))))
     ("M-h" (if hydra-is-helpful
	      (setq hydra-is-helpful nil)
	      (setq hydra-is-helpful t)) :exit nil)
     ("b" (progn
         (hydra-my-buffer/body)
         (hydra-push '(hydra-my-first-menu/body))))
     ("c" (progn
         (hydra-my-cscope/body)
         (hydra-push '(hydra-my-first-menu/body))))
     ("i" (progn
         (hydra-my-ivy/body)
         (hydra-push '(hydra-my-first-menu/body))))     
     ("r" (progn
         (hydra-my-rtags/body)
         (hydra-push '(hydra-my-first-menu/body))))
     ("q" nil "quit")
     ))

(defhydra hydra-my-ace (:pre (setq my-hydra-mode (propertize "ace" 'face '(:foreground "orange")))
       			:before-exit (progn (setq my-hydra-mode "")(force-mode-line-update))
   		        :idle 0
			:color blue)
"
_w_: word    _c_: char  _l_: line
_b_: back    _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("w" ace-jump-word-mode :exit t)
  ("l" ace-jump-line-mode :exit t)
  ("c" ace-jump-char-mode :exit t)
  ("M-h" (if hydra-is-helpful
	   (setq hydra-is-helpful nil)
	 (setq hydra-is-helpful t)) :exit nil)  
  ("b" hydra-pop "back")
  ("q" nil "quit")    
  )

(defhydra hydra-my-yas (:pre (setq my-hydra-mode (propertize "yas" 'face '(:foreground "orange")))
       			:before-exit (progn (setq my-hydra-mode "")(force-mode-line-update))
                        :idle 0
			:color blue)
"
_d_: expand    _c_: aya-create   _e_: aya-expand
_b_: back      _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("d" yas-expand :exit t)
  ("c" aya-create :exit t)
  ("e" aya-expand :exit t)
  ("M-h" (if hydra-is-helpful
	   (setq hydra-is-helpful nil)
	 (setq hydra-is-helpful t)) :exit nil)  
  ("b" hydra-pop "back")
  ("q" nil "quit")    
  )

(defhydra hydra-my-etags2 (:pre (setq my-hydra-mode (propertize "etags" 'face '(:foreground "red")))
       			  :before-exit (progn (setq my-hydra-mode "")(force-mode-line-update))
                          :idle 0
			  :color blue)
"
s: find   g: grep     _b_: back       _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("s" counsel-etags-find-tag)
  ("M-h" (if hydra-is-helpful
	   (setq hydra-is-helpful nil)
	 (setq hydra-is-helpful t)) :exit nil)  
  ("g" counsel-etags-grep)
  ("b" hydra-pop "back")
  ("q" nil "quit")    
  )

(defhydra hydra-my-etags (:pre (setq my-hydra-mode (propertize "etags" 'face '(:foreground "orange")))
       			  :before-exit (progn (setq my-hydra-mode "")(force-mode-line-update))
                          :idle 0
			  :color blue)
"
_s_: find-at-point  _M-s_: find        _p_: pop-tag-mark _r_: recent-tag _g_: grep-at-point 
_M-g_: grep         _u_: update-tags   _v_: visit-tags   _b_: back       _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("s" counsel-etags-find-tag-at-point)
  ("M-s" counsel-etags-find-tag)
  ("M-h" (if hydra-is-helpful
	   (setq hydra-is-helpful nil)
	 (setq hydra-is-helpful t)) :exit nil)  
  ("p" pop-tag-mark)
  ("v" visit-tags-table)  
  ("u" (shell-command etags-update-cmd))
  ("r" counsel-etags-recent-tag)
  ("g" counsel-etags-grep-symbol-at-point)  
  ("M-g" counsel-etags-grep)
  ("SPC" (progn
         (hydra-my-etags2/body)
         (hydra-push '(hydra-my-etags/body))))
  ("b" hydra-pop "back")
  ("q" nil "quit")    
  )

(defhydra hydra-my-emacs-file (:pre (setq my-hydra-mode (propertize "emacs" 'face '(:foreground "orange")))
       			       :before-exit (progn (setq my-hydra-mode "")(force-mode-line-update))
                               :idle 0
			       :color blue)
"
_a_: scratch      _c_: emacs.conf     _k_: emacs-key _m_: message _o_: other.lisp
_p_: package.conf _S_: spacemacs-func _s_: shell     _i_: ielm    _b_: back _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("a" (switch-to-buffer "*scratch*"))
  ("m" (switch-to-buffer "*Messages*"))
  ("c" (find-file "~/.emacs.conf/emacs.conf"))
  ("M-h" (if hydra-is-helpful
	   (setq hydra-is-helpful nil)
	 (setq hydra-is-helpful t)) :exit nil)  
  ("k" (find-file "~/.emacs.conf/emacs_key.conf"))
  ("o" (find-file "~/.emacs.conf/other.lisp"))
  ("p" (find-file "~/.emacs.conf/package.conf"))
  ("S" (find-file "~/.emacs.conf/spacemacs-func.lisp"))
  ("s" (progn (eshell)(delete-other-windows)))
  ("i" (progn (ielm)(delete-other-windows)))  
  ("b" hydra-pop "back")
  ("q" nil "quit")    
  )

(defhydra hydra-my-file2 (:pre (setq my-hydra-mode (propertize "file" 'face '(:foreground "red")))
       			 :before-exit (progn (setq my-hydra-mode "")(force-mode-line-update))
                         :idle 0
			 :color blue)
"
_e_: sudo-edit _r_: rename-current-buffer-file  _y_: show-current-dir  _b_: back   _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("e" spacemacs/sudo-edit)
  ("M-h" (if hydra-is-helpful
	   (setq hydra-is-helpful nil)
	 (setq hydra-is-helpful t)) :exit nil)  
  ("y" my_show-current-dir)  
  ("r" spacemacs/rename-current-buffer-file)
  ("b" hydra-pop "back")
  ("q" nil "quit")  
  )

(defhydra hydra-my-file (:pre (setq my-hydra-mode (propertize "file" 'face '(:foreground "orange")))
       			 :before-exit (progn (setq my-hydra-mode "")(force-mode-line-update))
                         :idle 0
			 :color blue)
"
_c_: copy-file       _d_: delete-current _E_: sudo-edit        _e_: emacs-file            _f_: counsel-find-file
_g_: rgrep           _h_: hexl-find-file _l_: counsel-locate   _m_: counsel-bookmark      _R_: rename-current-buffer-file
_r_: counsel-recentf _s_: save-buffer    _Y_: show-current-dir _y_: show-buffer-file-name _b_: back             _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("c" copy-file)
  ("d" spacemacs/delete-current-buffer-file)
  ("E" spacemacs/sudo-edit)
  ("SPC" (progn
         (hydra-my-file2/body)
         (hydra-push '(hydra-my-file/body))))
  ("e" (progn
         (hydra-my-emacs-file/body)
         (hydra-push '(hydra-my-file/body))))
  ("M-h" (if hydra-is-helpful
	   (setq hydra-is-helpful nil)
	 (setq hydra-is-helpful t)) :exit nil)  
  ("f" counsel-find-file)
  ("g" rgrep)
  ("Y" my_show-current-dir)  
  ("h" hexl-find-file)
  ("l" counsel-locate)
  ("m" counsel-bookmark)
  ("R" spacemacs/rename-current-buffer-file)
  ("r" counsel-recentf)
  ("s" save-buffer)
  ("y" spacemacs/show-and-copy-buffer-filename)  
  ("b" hydra-pop "back")
  ("q" nil "quit")  
  )

(setq hydra-my-ivy-ag-type "--cpp")
(defun my-set-ivy-ag-type-prompt ()
  (let* ((sym hydra-my-ivy-ag-type))
    (setq sym (read-string "ag param: " sym))
    sym
    ))
(defun my-set-ivy-ag-type-func (cs-id)
  (interactive (list (my-set-ivy-ag-type-prompt)))
  (setq hydra-my-ivy-ag-type cs-id))

(defhydra hydra-my-ivy (:pre (setq my-hydra-mode (propertize "ivy" 'face '(:foreground "orange")))
   			:before-exit (progn (setq my-hydra-mode "")(force-mode-line-update))
                        :idle 0
			:color blue)
"
_a_: ag     _i_: counsel-imenu _r_: resume _s_: swiper _S_: switch-buffer 
_t_: ag-cpp _u_: set-ag-type   _b_: back   _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("i" counsel-imenu :exit t)
  ("s" swiper :exit t)
  ("S" ivy-switch-buffer :exit t)  
  ("r" ivy-resume :exit t)
  ("a" counsel-ag :exit t)
  ("M-h" (if hydra-is-helpful
	   (setq hydra-is-helpful nil)
	 (setq hydra-is-helpful t)) :exit nil)  
  ("t" (counsel-ag (thing-at-point 'symbol) cscope-initial-directory hydra-my-ivy-ag-type nil) :exit t)
  ("u" my-set-ivy-ag-type-func :exit t)  
  ("b" hydra-pop "back")
  ("q" nil "quit")  
  )

(defhydra hydra-my-buffer (:pre (setq my-hydra-mode (propertize "buffer" 'face '(:foreground "orange")))
       			   :before-exit (progn (setq my-hydra-mode "")(force-mode-line-update))
                           :idle 0
			   :color blue)
"
_a_: scratch       _c_: cscope-buffer _g_: goto-line   _i_: ivy-switch-buffer _k_: kill-curren   
_l_: last-buffer   _m_: buffer-menu   _n_: next-buffer _p_: previous-buffer   _P_: python-buffer
_r_: revert-buffer _s_: shell         _b_: back        _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("m" buffer-menu)
  ("i" ivy-switch-buffer)
  ("r" revert-buffer)
  ("g" goto-line)
  ("p" previous-buffer :exit nil)
  ("l" (switch-to-buffer (other-buffer (current-buffer) 1)) :exit nil)
  ("n" next-buffer :exit nil)    
  ("s" (progn (eshell)(delete-other-windows)))
  ("a" (switch-to-buffer "*scratch*"))
  ("c" (switch-to-buffer "*cscope*"))  
  ("M-h" (if hydra-is-helpful
	   (setq hydra-is-helpful nil)
	 (setq hydra-is-helpful t)) :exit nil)  
  ("P" (progn
	 (run-python)
	 (switch-to-buffer "*Python*")))
  ("k" (kill-buffer (current-buffer)))
  ("b" hydra-pop "back")
  ("q" nil "quit")  
)

(defhydra hydra-my-cscope (:pre (setq my-hydra-mode (propertize "cscope" 'face '(:foreground "orange")))
       			   :before-exit (progn (setq my-hydra-mode "")(force-mode-line-update))
                           :idle 0
			   :color blue)
"
_g_: find-global   _t_: find-text  _f_: find-file   _e_: find-egrep  _i_: set-initial
_c_: find-calling  _p_: pop-back   _s_: find-symbol _b_: back       _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("g" cscope-find-global-definition)
  ("t" cscope-find-this-text-string)
  ("s" cscope-find-this-symbol)  
  ("f" cscope-find-this-file)
  ("e" cscope-find-egrep-pattern)
  ("M-h" (if hydra-is-helpful
	   (setq hydra-is-helpful nil)
	 (setq hydra-is-helpful t)) :exit nil)  
  ("i" cscope-set-initial-directory)
  ("c" cscope-find-functions-calling-this-function)
  ("p" cscope-pop-mark :exit nil)  
  ("b" hydra-pop "back")
  ("q" nil "quit")  
)

(defhydra hydra-my-rtags2 (:pre (setq my-hydra-mode (propertize "rtags" 'face '(:foreground "red")))
       			  :before-exit (progn (setq my-hydra-mode "")(force-mode-line-update))
                          :idle 0
			  :color blue)
"
_i_: info  _r_: references   _s_: symbol  _k_: rtags-restart-process  _b_: back  _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("i" rtags-symbol-info)
  ("r" rtags-find-references)
  ("s" rtags-find-symbol)
  ("M-h" (if hydra-is-helpful
	   (setq hydra-is-helpful nil)
	 (setq hydra-is-helpful t)) :exit nil)
  ("k" rtags-restart-process)
  ("b" 	(hydra-pop) "back")
  ("q" 	 nil  "quit")  
  )

(defhydra hydra-my-rtags (:pre (setq my-hydra-mode (propertize "rtags" 'face '(:foreground "orange")))
       			  :before-exit (progn (setq my-hydra-mode "")(force-mode-line-update))
                          :idle 0
			  :color blue)
"
_r_: references-at-point     _M-r_: references   _p_: stack-back     _f_: find-file _e_: ivy-rtags-read
_s_: symbol-at-point         _M-s_: symbol       _n_: stack-forward  _i_: include   _k_: irony-server-kill
_M-k_: rtags-restart-process _b_: back           _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("r" rtags-find-references-at-point)
  ("M-r" rtags-find-references)
  ("s" rtags-find-symbol-at-point)
  ("M-s" rtags-find-symbol)
  ("p" rtags-location-stack-back :exit nil)
  ("n" rtags-location-stack-forward :exit nil)
  ("e" (progn (ivy-rtags-read)))
  ("i" rtags-include-file)
  ("f" (progn (rtags-find-file)
	      (delete-window)
	      (ivy-rtags-read)))
  ("M-h" (if hydra-is-helpful
	   (setq hydra-is-helpful nil)
	 (setq hydra-is-helpful t)) :exit nil)
  ("k" irony-server-kill)
  ("M-k" rtags-restart-process)
  ("SPC" (progn
         (hydra-my-rtags2/body)
         (hydra-push '(hydra-my-rtags/body))))
  ("b" 	(hydra-pop) "back")
  ("q" 	 nil  "quit")  
  )

(defhydra hydra-my-org (:pre (setq my-hydra-mode (propertize "org" 'face '(:foreground "orange")))
       			  :before-exit (progn (setq my-hydra-mode "")(force-mode-line-update))
                          :idle 0
			  :color blue)
"
_c_: org-cycle      _b_: back           _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
     ("M-h" (if hydra-is-helpful
	      (setq hydra-is-helpful nil)
	      (setq hydra-is-helpful t)) :exit nil)
;;    ("Outline Navigation")
    ("n"  (org-speed-move-safe 'outline-next-visible-heading) :exit nil)
    ("p"  (org-speed-move-safe 'outline-previous-visible-heading) :exit nil)
    ("f"  (org-speed-move-safe 'org-forward-heading-same-level) :exit nil)
;;    ("b"  (org-speed-move-safe 'org-backward-heading-same-level))
    ("F"  org-next-block :exit nil)
    ("B"  org-previous-block :exit nil)
    ("u"  (org-speed-move-safe 'outline-up-heading) :exit nil)
    ("j"  org-goto)
    ("g"  (org-refile t))
;;    ("Outline Visibility")
    ("c"  org-cycle :exit nil)
    ("C"  org-shifttab)
    ("SPC"  org-display-outline-path)
    ("s"  org-narrow-to-subtree)
    ("="  org-columns)
;;    ("Outline Structure Editing")
    ("U"  org-shiftmetaup)
    ("D"  org-shiftmetadown)
    ("r"  org-metaright)
    ("l"  org-metaleft)
    ("R"  org-shiftmetaright)
    ("L"  org-shiftmetaleft)
    ("i"  (progn (forward-char 1) (call-interactively
				    'org-insert-heading-respect-content)))
    ("^"  org-sort)
    ("w"  org-refile)
    ("a"  org-archive-subtree-default-with-confirmation)
    ("@"  org-mark-subtree)
    ("#"  org-toggle-comment)
;;    ("Clock Commands")
    ("I"  org-clock-in)
    ("O"  org-clock-out)
;;    ("Meta Data Editing")
    ("t"  org-todo)
    (","  (org-priority))
    ("0"  (org-priority ?\ ))
    ("1"  (org-priority ?A))
    ("2"  (org-priority ?B))
    ("3"  (org-priority ?C))
    (":"  org-set-tags-command)
    ("e"  org-set-effort)
    ("E"  org-inc-effort)
    ("W"  (lambda(m) (interactive "sMinutes before warning: ")
	     (org-entry-put (point) "APPT_WARNTIME" m)))
;;    ("Agenda Views etc")
    ("v"  org-agenda)
    ("/"  org-sparse-tree)
;;    ("Misc")
    ("o"  org-open-at-point)
    ("?"  org-speed-command-help)
    ("<"  (org-agenda-set-restriction-lock 'subtree))
    (">"  (org-agenda-remove-restriction-lock))
    ("b" 	(hydra-pop) "back")
    ("q" 	 nil  "quit")  
    )


(defhydra hydra-my-move (:pre (progn (setq my-hydra-mode (propertize "move" 'face '(:foreground "orange")))
				      )
  		         :before-exit (progn (setq my-hydra-mode "")(force-mode-line-update))
                         :idle 0
			 :color blue)
"
_c_: comment-region _>_: end-of-buffer    _j_: ace-jump-mode _t_: hs-toggle-hiding _y_: yank         
_m_: set-mark       _w_: kill             _s_: hs-show-block _h_: hs-hide-block    _S_: hs-show-all       
_H_: hs-hide-all    _u_: undo             _M-w_: save        _d_: delete-char      _k_: delete-line   
_l_: recent-top     _t_: hs-toggle-hiding _M-h_: help        _g_: back             _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("c" comment-or-uncomment-region :exit nil)
  ("n" next-line :exit nil)
  ("p" previous-line :exit nil)
  ("f" forward-char :exit nil)
  ("w" kill-region :exit nil)
  ("d" delete-char :exit nil)
  ("k" kill-line :exit nil)
  ("u" undo :exit nil)
  ("y" yank :exit nil)
  ("m" set-mark-command :exit nil)
  ("M-h" (if hydra-is-helpful
	   (setq hydra-is-helpful nil)
	 (setq hydra-is-helpful t)) :exit nil)  
  ("M-w" kill-ring-save :exit nil)
  ("RET" newline :exit nil)
  ("b" backward-char :exit nil)
  ("F" forward-word :exit nil)
  ("B" backward-word :exit nil)
  ("a" beginning-of-line :exit nil)
  ("e" move-end-of-line :exit nil)
  ("v" scroll-up-command :exit nil)
  ("V" scroll-down-command :exit nil)
  ("l" recenter-top-bottom :exit nil)
  ("<" beginning-of-buffer :exit nil)
  (">" end-of-buffer :exit nil)
  ("j" ace-jump-mode :exit t)
  ;; hideshow
  ("t" hs-toggle-hiding :exit nil)
  ("s" hs-show-block :exit nil)
  ("h" hs-hide-block :exit nil)
  ("S" hs-show-all :exit nil)
  ("H" hs-hide-all :exit nil)
  ("g" (hydra-pop) "back")
  ("q" nil  "quit")  
)
