(defvar hydra-stack nil)

(defun hydra-push (expr)
  (push `(lambda () ,expr) hydra-stack))

(defun hydra-pop ()
  (interactive)
  (let ((x (pop hydra-stack)))
    (when x
      (funcall x))))

(global-set-key
   (kbd "M-o")
   (defhydra hydra-my-first-menu (:color teal)
"
_a_: ace    _c_: cscope   _e_: etags     _f_: file   _r_: rtags   _y_: yasnippet
_m_: move   _i_: ivy      _b_: buffer    _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
     ("y" (progn
         (hydra-my-yas/body)
         (hydra-push '(hydra-my-first-menu/body))))
     ("a" (progn
         (hydra-my-ace/body)
         (hydra-push '(hydra-my-first-menu/body))))
     ("m" (progn
         (hydra-my-move/body)
         (hydra-push '(hydra-my-first-menu/body))))
     ("f" (progn
         (hydra-my-file/body)
         (hydra-push '(hydra-my-first-menu/body))))     
     ("e" (progn
         (hydra-my-etags/body)
         (hydra-push '(hydra-my-first-menu/body))))
     ("b" (progn
         (hydra-my-buffer/body)
         (hydra-push '(hydra-my-first-menu/body))))
     ("c" (progn
         (hydra-my-cscope/body)
         (hydra-push '(hydra-my-first-menu/body))))
     ("i" (progn
         (hydra-my-ivy/body)
         (hydra-push '(hydra-my-first-menu/body))))     
     ("r" (progn
         (hydra-my-rtags/body)
         (hydra-push '(hydra-my-first-menu/body))))
     ("q" nil "quit")
     ))

(defhydra hydra-my-ace (:color blue)
"
_w_: word    _c_: char  _l_: line
_b_: back    _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("w" ace-jump-word-mode :exit t)
  ("l" ace-jump-line-mode :exit t)
  ("c" ace-jump-char-mode :exit t)
  ("b" hydra-pop "back")
  ("q" nil "quit")    
  )

(defhydra hydra-my-yas (:color blue)
"
_d_: expand    _c_: aya-create   _e_: aya-expand
_b_: back      _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("d" yas/expand :exit t)
  ("c" aya-create :exit t)
  ("e" aya-expand :exit t)
  ("b" hydra-pop "back")
  ("q" nil "quit")    
  )

(defhydra hydra-my-etags (:color blue)
"
_f_: find-at-point _F_: find          _p_: pop-tag-mark  _v_: visit-tags _u_: update_tags
_r_: recent-tag    _s_: grep-at-point _S_: grep         _b_: back       _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("f" counsel-etags-find-tag-at-point)
  ("F" counsel-etags-find-tag)
  ("p" pop-tag-mark)
  ("v" visit-tags-table)  
  ("u" (shell-command etags-update-cmd))
  ("r" counsel-etags-recent-tag)
  ("s" counsel-etags-grep-symbol-at-point)  
  ("S" counsel-etags-grep)
  ("b" hydra-pop "back")
  ("q" nil "quit")    
  )

(defhydra hydra-my-emacs-file (:color blue)
"
_a_: scratch      _c_: emacs.conf     _k_: emacs-key _m_: message _o_: other.lisp
_p_: package.conf _S_: spacemacs-func _s_: shell     _i_: ielm    _b_: back _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("a" (switch-to-buffer "*scratch*"))
  ("m" (switch-to-buffer "*Messages*"))
  ("c" (find-file "~/.emacs.conf/emacs.conf"))
  ("k" (find-file "~/.emacs.conf/emacs_key.conf"))
  ("o" (find-file "~/.emacs.conf/other.lisp"))
  ("p" (find-file "~/.emacs.conf/package.conf"))
  ("S" (find-file "~/.emacs.conf/spacemacs-func.lisp"))
  ("s" (progn (shell)(delete-other-windows)))
  ("i" (progn (ielm)(delete-other-windows)))  
  ("b" hydra-pop "back")
  ("q" nil "quit")    
  )

(defhydra hydra-my-file (:color blue)
"
_c_: copy-file       _d_: delete-current _E_: sudo-edit        _e_: emacs-file            _f_: counsel-find-file
_g_: rgrep           _h_: hexl-find-file _l_: counsel-locate   _m_: counsel-bookmark      _R_: rename-current-buffer-file
_r_: counsel-recentf _s_: save-buffer    _S_: show-current-dir _y_: show-buffer-file-name _b_: back             _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("c" copy-file)
  ("d" spacemacs/delete-current-buffer-file)
  ("E" spacemacs/sudo-edit)
  ("e" (progn
         (hydra-my-emacs-file/body)
         (hydra-push '(hydra-my-file/body))))
  ("f" counsel-find-file)
  ("g" rgrep)
  ("S" my_show-current-dir)  
  ("h" hexl-find-file)
  ("l" counsel-locate)
  ("m" counsel-bookmark)
  ("R" spacemacs/rename-current-buffer-file)
  ("r" counsel-recentf)
  ("s" save-buffer)
  ("y" spacemacs/show-and-copy-buffer-filename)  
  ("b" hydra-pop "back")
  ("q" nil "quit")  
  )

(defhydra hydra-my-ivy (:color blue)
"
_a_: ag     _i_: counsel-imenu _r_: resume _s_: swiper _S_: switch-buffer 
_t_: ag-cpp _b_: back          _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("i" counsel-imenu :exit t)
  ("s" swiper :exit t)
  ("S" ivy-switch-buffer :exit t)  
  ("r" ivy-resume :exit t)
  ("a" counsel-ag :exit t)
  ("t" (counsel-ag (thing-at-point 'symbol) cscope-initial-directory "--cpp" nil) :exit t)
  ("b" hydra-pop "back")
  ("q" nil "quit")  
  )
  
(defhydra hydra-my-move (:color blue)
"
_c_: comment-region _>_: end-of-buffer    _j_: ace-jump-mode _t_: hs-toggle-hiding _y_: yank         
_m_: set-mark       _w_: kill             _s_: hs-show-block _h_: hs-hide-block    _S_: hs-show-all       
_H_: hs-hide-all    _u_: undo             _M-w_: save        _d_: delete-char      _k_: delete-line   
_l_: recent-top     _t_: hs-toggle-hiding _g_: back          _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("c" comment-or-uncomment-region :exit nil)
  ("n" next-line :exit nil)
  ("p" previous-line :exit nil)
  ("f" forward-char :exit nil)
  ("w" kill-region :exit nil)
  ("d" delete-char :exit nil)
  ("k" kill-line :exit nil)
  ("u" undo :exit nil)
  ("y" yank :exit nil)
  ("m" set-mark-command :exit nil)
  ("M-w" kill-ring-save :exit nil)
  ("RET" newline :exit nil)
  ("b" backward-char :exit nil)
  ("F" forward-word :exit nil)
  ("B" backward-word :exit nil)
  ("a" beginning-of-line :exit nil)
  ("e" move-end-of-line :exit nil)
  ("v" scroll-up-command :exit nil)
  ("V" scroll-down-command :exit nil)
  ("l" recenter-top-bottom :exit nil)
  ("<" beginning-of-buffer :exit nil)
  (">" end-of-buffer :exit nil)
  ("j" ace-jump-mode :exit t)
  ;; hideshow
  ("t" hs-toggle-hiding :exit nil)
  ("s" hs-show-block :exit nil)
  ("h" hs-hide-block :exit nil)
  ("S" hs-show-all :exit nil)
  ("H" hs-hide-all :exit nil)
  ("g" hydra-pop "back")
  ("q" nil "quit")  
)

(defhydra hydra-my-buffer (:color blue)
"
_a_: scratch         _i_: ivy-switch-buffer _k_: kill-curren   _m_: buffer-menu _n_: next-buffer
_p_: previous-buffer _P_: python-buffer     _r_: revert-buffer _s_: shell  _b_: back   _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("m" buffer-menu)
  ("i" ivy-switch-buffer)
  ("r" revert-buffer)
  ("p" previous-buffer)
  ("n" next-buffer)    
  ("s" (progn (shell)(delete-other-windows)))
  ("a" (switch-to-buffer "*scratch*"))
  ("P" (progn
	 (run-python)
	 (switch-to-buffer "*Python*")))
  ("k" (kill-buffer (current-buffer)))
  ("b" hydra-pop "back")
  ("q" nil "quit")  
)

(defhydra hydra-my-cscope (:color blue)
"
_g_: find-global   _t_: find-text  _f_: find-file  _e_: find-egrep  _i_: set-initial
_c_: find-calling  _p_: pop-back   _b_: back       _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("g" cscope-find-global-definition)
  ("t" cscope-find-this-text-string)
  ("f" cscope-find-this-file)
  ("e" cscope-find-egrep-pattern)
  ("i" cscope-set-initial-directory)
  ("c" cscope-find-functions-calling-this-function)
  ("p" cscope-pop-mark :exit nil)  
  ("b" hydra-pop "back")
  ("q" nil "quit")  
)

(defhydra hydra-my-rtags (:color blue)
"
_r_: references-at-point     _M-r_: references   _p_: stack-back     _f_: find-file _e_: ivy-rtags-read
_s_: symbol-at-point         _M-s_: symbol       _n_: stack-forward  _i_: include   _k_: irony-server-kill
_M-k_: rtags-restart-process _b_: back      _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("r" rtags-find-references-at-point)
  ("M-r" rtags-find-references)
  ("s" rtags-find-symbol-at-point)
  ("M-s" rtags-find-symbol)
  ("p" rtags-location-stack-back :exit nil)
  ("n" rtags-location-stack-forward :exit nil)
  ("e" (progn (ivy-rtags-read)))
  ("i" rtags-include-file)
  ("f" (progn (rtags-find-file)
	      (delete-window)
	      (ivy-rtags-read)))

  ("k" irony-server-kill)
  ("M-k" rtags-restart-process)

  ("b" hydra-pop "back")
  ("q" nil "quit")  
)

(require 'itail)
(define-key itail-keymap (kbd "g") 'itail-add-grep)
(define-key itail-keymap (kbd "f") 'itail-toggle-filter)
(define-key itail-keymap (kbd "c") 'itail-clear)
(define-key itail-keymap (kbd "s") 'itail-show-filters)
(define-key itail-keymap (kbd "r") 'itail-remove-all-filters)
(define-key itail-keymap (kbd "h") 'itail-highlight)
(define-key itail-keymap (kbd "u") 'itail-unhighlight)
(define-key itail-keymap (kbd "k") 'itail-kill)
