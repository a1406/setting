(defvar hydra-stack nil)

(defun hydra-push (expr)
  (push `(lambda () ,expr) hydra-stack))

(defun hydra-pop ()
  (interactive)
  (let ((x (pop hydra-stack)))
    (when x
      (funcall x))))

(global-set-key
   (kbd "M-o")
   (defhydra hydra-my-first-menu (:color teal)
"
_a_: ace    _c_: cscope   _e_: etags     _r_: rtags   _y_: yasnippet
_m_: move   _i_: ivy      _b_: buffer    _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
     ("y" (progn
         (hydra-my-yas/body)
         (hydra-push '(hydra-my-first-menu/body))))
     ("a" (progn
         (hydra-my-ace/body)
         (hydra-push '(hydra-my-first-menu/body))))
     ("m" (progn
         (hydra-my-move/body)
         (hydra-push '(hydra-my-first-menu/body))))
     ("e" (progn
         (hydra-my-etags/body)
         (hydra-push '(hydra-my-first-menu/body))))
     ("b" (progn
         (hydra-my-buffer/body)
         (hydra-push '(hydra-my-first-menu/body))))
     ("c" (progn
         (hydra-my-cscope/body)
         (hydra-push '(hydra-my-first-menu/body))))
     ("i" (progn
         (hydra-my-ivy/body)
         (hydra-push '(hydra-my-first-menu/body))))     
     ("r" (progn
         (hydra-my-rtags/body)
         (hydra-push '(hydra-my-first-menu/body))))
     ("q" nil "quit")
     ))

(defhydra hydra-my-ace (:color blue)
"
_w_: word    _c_: char  _l_: line
_b_: back    _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("w" ace-jump-word-mode :exit t)
  ("l" ace-jump-line-mode :exit t)
  ("c" ace-jump-char-mode :exit t)
  ("b" hydra-pop "back")
  ("q" nil "quit")    
  )

(defhydra hydra-my-yas (:color blue)
"
_d_: expand    _c_: aya-create   _e_: aya-expand
_b_: back      _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("d" yas/expand :exit t)
  ("c" aya-create :exit t)
  ("e" aya-expand :exit t)
  ("b" hydra-pop "back")
  ("q" nil "quit")    
  )

(defhydra hydra-my-etags (:color blue)
"
_f_: find-at-point _F_: find          _p_: pop-tag-mark  _v_: visit-tags _u_: update_tags
_r_: recent-tag    _s_: grep-at-point _S_: grep         _b_: back       _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("f" counsel-etags-find-tag-at-point)
  ("F" counsel-etags-find-tag)
  ("p" pop-tag-mark)
  ("v" visit-tags-table)  
  ("u" (shell-command etags-update-cmd))
  ("r" counsel-etags-recent-tag)
  ("s" counsel-etags-grep-symbol-at-point)  
  ("S" counsel-etags-grep)
  ("b" hydra-pop "back")
  ("q" nil "quit")    
  )

(defhydra hydra-my-ivy (:color blue)
"
_s_: switch-buffer     _r_: resume   _a_: ag    _t_ ag_cpp
_b_: back              _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("s" ivy-switch-buffer :exit t)
  ("r" ivy-resume :exit t)
  ("a" counsel-ag :exit t)
  ("t" (counsel-ag (thing-at-point 'symbol) cscope-initial-directory "--cpp" nil) :exit t)
  ("b" hydra-pop "back")
  ("q" nil "quit")  
  )
  
(defhydra hydra-my-move (:color blue)
"
_>_: end-of-buffer  _j_: ace-jump-mode _t_: hs-toggle-hiding  _y_: yank         _m_: mark  _w_: save
_s_: hs-show-block  _h_: hs-hide-block _S_: hs-show-all       _H_: hs-hide-all  _u_: undo  _M-w_: kill 
_d_: delete-char    _k_: delete-line   _l_: recent-top        _g_: back         _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("n" next-line :exit nil)
  ("p" previous-line :exit nil)
  ("f" forward-char :exit nil)
  ("M-w" kill-region :exit nil)
  ("d" delete-char :exit nil)
  ("k" kill-line :exit nil)
  ("u" undo :exit nil)
  ("y" yank :exit nil)
  ("m" set-mark-command :exit nil)
  ("w" kill-ring-save :exit nil)
  ("RET" newline :exit nil)
  ("b" backward-char :exit nil)
  ("F" forward-word :exit nil)
  ("B" backward-word :exit nil)
  ("a" beginning-of-line :exit nil)
  ("e" move-end-of-line :exit nil)
  ("v" scroll-up-command :exit nil)
  ("V" scroll-down-command :exit nil)
  ("l" recenter-top-bottom :exit nil)
  ("<" beginning-of-buffer :exit nil)
  (">" end-of-buffer :exit nil)
  ("j" ace-jump-mode :exit t)
  ;; hideshow
  ("t" hs-toggle-hiding :exit nil)
  ("s" hs-show-block :exit nil)
  ("h" hs-hide-block :exit nil)
  ("S" hs-show-all :exit nil)
  ("H" hs-hide-all :exit nil)
  ("g" hydra-pop "back")
  ("q" nil "quit")  
)

(defhydra hydra-my-buffer (:color blue)
"
_m_: buffer-menu _i_: ivy-switch-buffer _s_: shell _a_: scratch
_k_: kill-curren _c_: config            _b_: back              _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("m" buffer-menu)
  ("i" ivy-switch-buffer)
  ("s" (progn (shell)(delete-other-windows)))
  ("c" (find-file "~/.emacs.conf/emacs_key.conf"))    
  ("a" (switch-to-buffer "*scratch*"))
  ("k" (kill-buffer (current-buffer)))
  ("b" hydra-pop "back")
  ("q" nil "quit")  
)

(defhydra hydra-my-cscope (:color blue)
"
_g_: find-global   _t_: find-text  _f_: find-file  _e_: find-egrep  _i_: set-initial
_c_: find-calling  _p_: pop-back   _b_: back       _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("g" cscope-find-global-definition)
  ("t" cscope-find-this-text-string)
  ("f" cscope-find-this-file)
  ("e" cscope-find-egrep-pattern)
  ("i" cscope-set-initial-directory)
  ("c" cscope-find-functions-calling-this-function)
  ("p" cscope-pop-mark)  
  ("b" hydra-pop "back")
  ("q" nil "quit")  
)

(defhydra hydra-my-rtags (:color blue)
"
_r_: references-at-point _M-r_: references   _p_: stack-back     _f_: find-file _e_: ivy-rtags-read
_s_: symbol-at-point     _M-s_: symbol       _n_: stack-forward  _i_: include   _b_: back      _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("r" rtags-find-references-at-point)
  ("M-r" rtags-find-references)
  ("s" rtags-find-symbol-at-point)
  ("M-s" rtags-find-symbol)
  ("p" rtags-location-stack-back)
  ("n" rtags-location-stack-forward)
  ("e" (progn (ivy-rtags-read)))
  ("i" rtags-include-file)
  ("f" (progn (rtags-find-file)
	      (delete-window)
	      (ivy-rtags-read)))
  ("b" hydra-pop "back")
  ("q" nil "quit")  
)
