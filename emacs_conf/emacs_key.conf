(require 'god-mode)
(global-set-key (kbd "M-`") 'god-mode-all)
(setq god-exempt-major-modes nil)
(setq god-exempt-predicates nil)
(define-key god-local-mode-map (kbd "m") 'set-mark-command)
(define-key god-local-mode-map (kbd "z") 'repeat)
(define-key god-local-mode-map (kbd "i") 'god-mode-all)
(define-key god-local-mode-map (kbd "q") 'god-mode-all)

(define-key key-translation-map (kbd "M-SPC") (kbd "C-g"))
;;(define-key key-translation-map (kbd "C-o") (kbd "C-g"))
(define-key key-translation-map (kbd "s-SPC") (kbd "C-g"))

(require 'itail)
(define-key itail-keymap (kbd "g") 'itail-add-grep)
(define-key itail-keymap (kbd "f") 'itail-toggle-filter)
(define-key itail-keymap (kbd "c") 'itail-clear)
(define-key itail-keymap (kbd "s") 'itail-show-filters)
(define-key itail-keymap (kbd "r") 'itail-remove-all-filters)
(define-key itail-keymap (kbd "h") 'itail-highlight)
(define-key itail-keymap (kbd "u") 'itail-unhighlight)
(define-key itail-keymap (kbd "k") 'itail-kill)

(defvar hydra-stack nil)

(defun hydra-push (expr)
  (push `(lambda () ,expr) hydra-stack))

(defun hydra-pop ()
  (interactive)
  (let ((x (pop hydra-stack)))
    (when x
      (funcall x))))

(global-set-key
   (kbd "M-o")
   (defhydra hydra-my-first-menu (:pre (progn (setq my-hydra-mode (propertize "root" 'face '(:foreground "orange")))
					      (force-mode-line-update))
         			  :before-exit (progn (setq my-hydra-mode "")(force-mode-line-update))
				  :idle 0
				  :color teal)
"
_a_: ace       _c_: cscope _f_: file  _o_: org  _r_: rtags   
_y_: yasnippet _m_: move   _e_: etags _i_: ivy  _b_: buffer _q_: quit

_u_: undo     _._: end           _,_: begin      _s_: save  
_l_: recenter _(_: yank with ()  _x_: exit emacs 
^---^------------^----------^-----------------^-----^-----------------
"
     ("x" (save-buffers-kill-terminal))
     ("y" (progn
         (hydra-my-yas/body)
         (hydra-push '(hydra-my-first-menu/body))))
     ("a" (progn
         (hydra-my-ace/body)
         (hydra-push '(hydra-my-first-menu/body))))
     ("o" (progn
         (hydra-my-org/body)
         (hydra-push '(hydra-my-first-menu/body))))
     ("m" (progn
	    (if (eq major-mode 'term-mode)
		(term-line-mode))
            (hydra-my-move/body)
            (hydra-push '(hydra-my-first-menu/body))))
     ("f" (progn
         (hydra-my-file/body)
         (hydra-push '(hydra-my-first-menu/body))))     
     ("e" (progn
         (hydra-my-etags/body)
         (hydra-push '(hydra-my-first-menu/body))))
     ("g" (progn
         (hydra-my-gtags/body)
         (hydra-push '(hydra-my-first-menu/body))))
     ("M-h" (if hydra-is-helpful
	      (setq hydra-is-helpful nil)
	      (setq hydra-is-helpful t)) :exit nil)
     ("b" (progn
         (hydra-my-buffer/body)
         (hydra-push '(hydra-my-first-menu/body))))
     ("c" (progn
         (hydra-my-cscope/body)
         (hydra-push '(hydra-my-first-menu/body))))
     ("i" (progn
         (hydra-my-ivy/body)
         (hydra-push '(hydra-my-first-menu/body))))     
     ("r" (progn
         (hydra-my-rtags/body)
         (hydra-push '(hydra-my-first-menu/body))))
     ("q" nil "quit")
     ("u" undo :exit t)     
     ("s" save-buffer :exit t)
     ("."  end-of-buffer :exit t)
     (","  beginning-of-buffer :exit t)
     ("l"  recenter-top-bottom :exit t)
     ("(" (progn
	    (insert-char #x28)
	    (yank)
	    (insert-char #x29)) :exit t)
     ))

(defhydra hydra-my-ace (:pre (setq my-hydra-mode (propertize "ace" 'face '(:foreground "orange")))
       			:before-exit (progn (setq my-hydra-mode "")(force-mode-line-update))
   		        :idle 0
			:color blue)
"
_w_: word    _c_: char  _l_: line
_b_: back    _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("w" avy-goto-word-1 :exit t)
  ("l" avy-goto-line :exit t)
  ("c" avy-goto-char :exit t)
  ("M-h" (if hydra-is-helpful
	   (setq hydra-is-helpful nil)
	 (setq hydra-is-helpful t)) :exit nil)  
  ("b" hydra-pop "back")
  ("q" nil "quit")    
  )

(defhydra hydra-my-yas (:pre (setq my-hydra-mode (propertize "yas" 'face '(:foreground "orange")))
       			:before-exit (progn (setq my-hydra-mode "")(force-mode-line-update))
                        :idle 0
			:color blue)
"
_d_: expand    _c_: aya-create   _e_: aya-expand
_b_: back      _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("d" yas-expand :exit t)
  ("c" aya-create :exit t)
  ("e" aya-expand :exit t)
  ("M-h" (if hydra-is-helpful
	   (setq hydra-is-helpful nil)
	 (setq hydra-is-helpful t)) :exit nil)  
  ("b" hydra-pop "back")
  ("q" nil "quit")    
  )

(defhydra hydra-my-gtags (:pre (setq my-hydra-mode (propertize "gtags" 'face '(:foreground "orange")))
       			  :before-exit (progn (setq my-hydra-mode "")(force-mode-line-update))
                          :idle 0
			  :color blue)
"
_g_: find-def      _r_: find-ref    _s_: find-sym     _f_: find-file  _C-f_: go-forward    
_C-b_: go-backward _c_: create-tags _u_: update-tags  _b_: back       _q_:   quit
^---^------------^----------^-----------------^-----^-----------------
"
("g" counsel-gtags-find-definition)
("r" counsel-gtags-find-reference)
("s" counsel-gtags-find-symbol)
("f" counsel-gtags-find-file)
("C-f" counsel-gtags-go-forward)
("C-b" counsel-gtags-go-backward)
("c" counsel-gtags-create-tags)
("u" counsel-gtags-update-tags)
("M-h" (if hydra-is-helpful
	   (setq hydra-is-helpful nil)
	 (setq hydra-is-helpful t)) :exit nil)  
("b" hydra-pop "back")
("q" nil "quit")    
  )

(defhydra hydra-my-etags2 (:pre (setq my-hydra-mode (propertize "etags" 'face '(:foreground "red")))
       			  :before-exit (progn (setq my-hydra-mode "")(force-mode-line-update))
                          :idle 0
			  :color blue)
"
s: find   g: grep     _b_: back       _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("s" counsel-etags-find-tag)
  ("M-h" (if hydra-is-helpful
	   (setq hydra-is-helpful nil)
	 (setq hydra-is-helpful t)) :exit nil)  
  ("g" counsel-etags-grep)
  ("b" hydra-pop "back")
  ("q" nil "quit")    
  )

(require 'counsel-etags)
(defun my-etags-find-tag ()
  (interactive)
    (if (counsel-etags-tagname-at-point)
	(counsel-etags-find-tag-at-point)
      (counsel-etags-find-tag)
      )
    )

(defhydra hydra-my-etags (:pre (setq my-hydra-mode (propertize "etags" 'face '(:foreground "orange")))
       			  :before-exit (progn (setq my-hydra-mode "")(force-mode-line-update))
                          :idle 0
			  :color blue)
"
_f_: show-tags-file-name  _s_: find-at-point     _M-s_: find        _p_: pop-tag-mark  _r_: recent-tag    _g_: grep-at-point 
_M-g_: grep               _M-u_: update-all-tags _u_: update-etags  _v_: visit-tags    _b_: back          _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("s" my-etags-find-tag)
  ("M-s" counsel-etags-find-tag)
  ("M-h" (if hydra-is-helpful
	   (setq hydra-is-helpful nil)
	 (setq hydra-is-helpful t)) :exit nil)  
  ("p" pop-tag-mark)
  ("v" visit-tags-table)  
  ("u" (shell-command (format "%s/etags.sh" cscope-initial-directory)))
  ("M-u" (shell-command (format "%s/cscope.sh" cscope-initial-directory)))
  ("r" counsel-etags-recent-tag)
  ("f" (message "%s" (counsel-etags-locate-tags-file)))
  ("g" counsel-etags-grep-symbol-at-point)  
  ("M-g" counsel-etags-grep)
  ("SPC" (progn
         (hydra-my-etags2/body)
         (hydra-push '(hydra-my-etags/body))))
  ("b" hydra-pop "back")
  ("q" nil "quit")    
  )

(defhydra hydra-my-emacs-file (:pre (setq my-hydra-mode (propertize "emacs" 'face '(:foreground "orange")))
       			       :before-exit (progn (setq my-hydra-mode "")(force-mode-line-update))
                               :idle 0
			       :color blue)
"
_a_: scratch      _c_: emacs.conf     _k_: emacs-key _m_: message _o_: other.lisp
_p_: package.conf _S_: spacemacs-func _s_: shell     _i_: ielm    _b_: back _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("a" (switch-to-buffer "*scratch*"))
  ("m" (switch-to-buffer "*Messages*"))
  ("c" (find-file "~/.emacs.conf/emacs.conf"))
  ("M-h" (if hydra-is-helpful
	   (setq hydra-is-helpful nil)
	 (setq hydra-is-helpful t)) :exit nil)  
  ("k" (find-file "~/.emacs.conf/emacs_key.conf"))
  ("o" (find-file "~/.emacs.conf/other.lisp"))
  ("p" (find-file "~/.emacs.conf/package.conf"))
  ("S" (find-file "~/.emacs.conf/spacemacs-func.lisp"))
  ("s" (progn (my-enter-shell)(delete-other-windows)))
  ("i" (progn (ielm)(delete-other-windows)))  
  ("b" hydra-pop "back")
  ("q" nil "quit")    
  )

(defhydra hydra-my-file2 (:pre (setq my-hydra-mode (propertize "file" 'face '(:foreground "red")))
       			 :before-exit (progn (setq my-hydra-mode "")(force-mode-line-update))
                         :idle 0
			 :color blue)
"
_e_: sudo-edit _r_: rename-current-buffer-file  _y_: show-current-dir  _b_: back   _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("e" spacemacs/sudo-edit)
  ("M-h" (if hydra-is-helpful
	   (setq hydra-is-helpful nil)
	 (setq hydra-is-helpful t)) :exit nil)  
  ("y" my_show-current-dir)  
  ("r" spacemacs/rename-current-buffer-file)
  ("b" hydra-pop "back")
  ("q" nil "quit")  
  )

(defhydra hydra-my-file (:pre (setq my-hydra-mode (propertize "file" 'face '(:foreground "orange")))
       			 :before-exit (progn (setq my-hydra-mode "")(force-mode-line-update))
                         :idle 0
			 :color blue)
"
_c_: copy-file       _d_: delete-current _E_: sudo-edit        _e_: emacs-file            _f_: counsel-find-file
_g_: rgrep           _h_: hexl-find-file _l_: counsel-locate   _m_: counsel-bookmark      _R_: rename-current-buffer-file
_r_: counsel-recentf _s_: save-buffer    _Y_: show-current-dir _y_: show-buffer-file-name _b_: back             _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("c" copy-file)
  ("d" spacemacs/delete-current-buffer-file)
  ("E" spacemacs/sudo-edit)
  ("SPC" (progn
         (hydra-my-file2/body)
         (hydra-push '(hydra-my-file/body))))
  ("e" (progn
         (hydra-my-emacs-file/body)
         (hydra-push '(hydra-my-file/body))))
  ("M-h" (if hydra-is-helpful
	   (setq hydra-is-helpful nil)
	 (setq hydra-is-helpful t)) :exit nil)  
  ("f" counsel-find-file)
  ("g" rgrep)
  ("Y" my_show-current-dir)  
  ("h" hexl-find-file)
  ("l" counsel-locate)
  ("m" counsel-bookmark)
  ("R" spacemacs/rename-current-buffer-file)
  ("r" counsel-recentf)
  ("s" save-buffer)
  ("y" spacemacs/show-and-copy-buffer-filename)
  ("b" hydra-pop "back")
  ("q" nil "quit")  
  )

(setq hydra-my-ivy-ag-type "--cpp")
(defun my-set-ivy-ag-type-prompt ()
  (let* ((sym hydra-my-ivy-ag-type))
    (setq sym (read-string "ag param: " sym))
    sym
    ))
(defun my-set-ivy-ag-type-func (cs-id)
  (interactive (list (my-set-ivy-ag-type-prompt)))
  (setq hydra-my-ivy-ag-type cs-id))

(defun read-cscope-file-as-ag-param ()
  (with-temp-buffer
    (insert-file-contents-literally (format "%s/%s" cscope-initial-directory cscope-index-file))
    (replace-regexp "\n" " ")	    
    (buffer-string))
)

(load "~/.emacs.conf/my-counsel-ag.lisp")
(defun read-lines (filePath)
  "Return a list of lines of a file at filePath."
  (with-temp-buffer
    (insert-file-contents filePath)
    (split-string (buffer-string) "\n" t)))
(defun my-key/ivy-cscope-file ()
  (interactive)  
  (let* ((cs-f (concat cscope-initial-directory "/cscope.files"))
    (cs-line (read-lines cs-f)))
    (ivy-read "open proj file: "
	      cs-line
	      :action (lambda (x)
			(let ((f-name (concat cscope-initial-directory x)))
			  (find-file f-name)))
	      )))

(defhydra hydra-my-ivy (:pre (setq my-hydra-mode (propertize "ivy" 'face '(:foreground "orange")))
   			:before-exit (progn (setq my-hydra-mode "")(force-mode-line-update))
                        :idle 0
			:color blue)
"
_a_: ag      _f_: cscope-file  _i_: counsel-imenu _r_: resume _s_: swiper _S_: switch-buffer 
_t_: ag-cpp  _u_: set-ag-type  _y_: kill-ring     _b_: back   _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("i" counsel-imenu :exit t)
  ("f" my-key/ivy-cscope-file)
  ("s" swiper :exit t)
  ("S" ivy-switch-buffer :exit t)  
  ("r" ivy-resume :exit t)
  ("a" counsel-ag :exit t)
  ("M-h" (if hydra-is-helpful
	   (setq hydra-is-helpful nil)
	 (setq hydra-is-helpful t)) :exit nil)  
  ("M-t" (counsel-ag (thing-at-point 'symbol) cscope-initial-directory hydra-my-ivy-ag-type nil) :exit t)
;;  ("t" (counsel-ag (thing-at-point 'symbol) cscope-initial-directory (format " -- %s " (read-cscope-file-as-ag-param)) nil) :exit t)
  ;;  ("t" (my-counsel-ag (thing-at-point 'symbol) cscope-initial-directory nil nil) :exit t)
  ("t" (counsel-ag (thing-at-point 'symbol) cscope-initial-directory (format "-E %s/%s" cscope-initial-directory cscope-index-file) nil) :exit t)  
  ("u" my-set-ivy-ag-type-func :exit t)
  ("y" counsel-yank-pop :exit t)  
  ("b" hydra-pop "back")
  ("q" nil "quit")  
  )

(defhydra hydra-my-buffer (:pre (setq my-hydra-mode (propertize "buffer" 'face '(:foreground "orange")))
       			   :before-exit (progn (setq my-hydra-mode "")(force-mode-line-update))
                           :idle 0
			   :color blue)
"
_a_: scratch       _c_: cscope-buffe  _g_: goto-line    _i_: ivy-switch-buffer _k_: kill-curren   
_l_: last-buffer   _m_: buffer-menu   _n_: next-buffer  _p_: previous-buffer   _P_: python-buffer 
_r_: revert-buffer _s_: shell         _u_: undo         _b_: back              _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("m" buffer-menu)
  ("i" ivy-switch-buffer)
  ("r" revert-all-buffers)
  ("g" goto-line)
  ("u" undo :exit nil)
  ("U" (lambda () (interactive) t) :exit nil)
  ("p" previous-buffer :exit nil)
  ("l" (switch-to-buffer (other-buffer (current-buffer) 1)) :exit nil)
  ("n" next-buffer :exit nil)    
  ("s" (progn (my-enter-shell)(delete-other-windows)))
  ("a" (switch-to-buffer "*scratch*"))
  ("c" (switch-to-buffer "*cscope*"))  
  ("M-h" (if hydra-is-helpful
	   (setq hydra-is-helpful nil)
	 (setq hydra-is-helpful t)) :exit nil)  
  ("P" (progn
	 (switch-to-buffer "*scratch*")
	 (run-python)
	 (switch-to-buffer "*Python*")
	 (delete-other-windows)
	 ))
  ("k" (kill-buffer (current-buffer)))
  ("b" hydra-pop "back")
  ("q" nil "quit")  
)

(defhydra hydra-my-cscope (:pre (setq my-hydra-mode (propertize "cscope" 'face '(:foreground "orange")))
       			   :before-exit (progn (setq my-hydra-mode "")(force-mode-line-update))
                           :idle 0
			   :color blue)
"
_g_: find-global   _t_: find-text  _f_: find-file   _e_: find-egrep  _i_: set-initial
_c_: find-calling  _p_: pop-back   _s_: find-symbol _b_: back       _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("g" cscope-find-global-definition)
  ("t" cscope-find-this-text-string)
  ("s" cscope-find-this-symbol)  
  ("f" cscope-find-this-file)
  ("e" cscope-find-egrep-pattern)
  ("M-h" (if hydra-is-helpful
	   (setq hydra-is-helpful nil)
	 (setq hydra-is-helpful t)) :exit nil)  
  ("i" cscope-set-initial-directory)
  ("c" cscope-find-functions-calling-this-function)
  ("p" cscope-pop-mark :exit nil)  
  ("b" hydra-pop "back")
  ("q" nil "quit")  
)


(defun rtags-ivy-rc ()
  (interactive)  
  (let* ((aaa (with-temp-buffer
		(call-process "rc" nil t nil "-w")
		(buffer-string)
		))
	 (bbb (split-string aaa "\n")))
    (ivy-read "rc choose proj: "
	      bbb
	      :dynamic-collection nil
	      :action (lambda (x)
			(let ((param (format "-w %s" x)))
			  (call-process "rc" nil nil nil param)))
	      :caller 'rtags-ivy-rc)))

(defhydra hydra-my-rtags2 (:pre (setq my-hydra-mode (propertize "rtags" 'face '(:foreground "red")))
       			  :before-exit (progn (setq my-hydra-mode "")(force-mode-line-update))
                          :idle 0
			  :color blue)
"
_i_: info  _p_: set-project     _r_: references   _s_: symbol  _k_: rtags-restart-process  
_f_: fixit _t_: references-tree _b_: back         _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("i" rtags-symbol-info)
  ("f" rtags-fixit)
  ("t" rtags-references-tree)
  ("r" rtags-find-references)
  ("s" rtags-find-symbol)
  ("p" my_rtags-set-current-project)
  ("M-h" (if hydra-is-helpful
	   (setq hydra-is-helpful nil)
	 (setq hydra-is-helpful t)) :exit nil)
  ("k" rtags-restart-process)
  ("b" 	(hydra-pop) "back")
  ("q" 	 nil  "quit")  
  )

(defhydra hydra-my-rtags (:pre (setq my-hydra-mode (propertize "rtags" 'face '(:foreground "orange")))
       			  :before-exit (progn (setq my-hydra-mode "")(force-mode-line-update))
                          :idle 0
			  :color blue)
"
_r_: references-at-point     _M-r_: references   _p_: stack-back     _f_: find-file    _e_: ivy-rtags-read
_s_: symbol-at-point         _M-s_: symbol       _n_: stack-forward  _i_: include      _k_: irony-server-kill
_M-k_: rtags-restart-process _o_:   other-file   _t_: reference-tree _c_: choose-proj  _b_: back      _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("c" rtags-ivy-rc :exit t)
  ("r" rtags-find-references-at-point)
  ("M-r" rtags-find-references)
  ("s" rtags-find-symbol-at-point)
  ("t" rtags-references-tree)
  ("M-s" rtags-find-symbol)
  ("p" rtags-location-stack-back :exit nil)
  ("n" rtags-location-stack-forward :exit nil)
  ("e" (progn (ivy-rtags-read)))
  ("i" rtags-include-file)
  ("o" my-rtags-open-other-file)
  ("f" (progn (rtags-find-file)
	      (if (window-parent nil)
		  (progn
		    (delete-window)
		    (ivy-rtags-read)))))
  ("M-h" (if hydra-is-helpful
	   (setq hydra-is-helpful nil)
	 (setq hydra-is-helpful t)) :exit nil)
  ("k" irony-server-kill)
  ("M-k" rtags-restart-process)
  ("SPC" (progn
         (hydra-my-rtags2/body)
         (hydra-push '(hydra-my-rtags/body))))
  ("b" 	(hydra-pop) "back")
  ("q" 	 nil  "quit")  
  )

(defhydra hydra-my-org (:pre (setq my-hydra-mode (propertize "org" 'face '(:foreground "orange")))
       			  :before-exit (progn (setq my-hydra-mode "")(force-mode-line-update))
                          :idle 0
			  :color blue)
"
_c_: org-cycle      _b_: back           _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
     ("M-h" (if hydra-is-helpful
	      (setq hydra-is-helpful nil)
	      (setq hydra-is-helpful t)) :exit nil)
;;    ("Outline Navigation")
    ("n"  (org-speed-move-safe 'outline-next-visible-heading) :exit nil)
    ("p"  (org-speed-move-safe 'outline-previous-visible-heading) :exit nil)
    ("f"  (org-speed-move-safe 'org-forward-heading-same-level) :exit nil)
    ("d"  org-insert-src-block)
    ("F"  org-next-block :exit nil)
    ("B"  org-previous-block :exit nil)
    ("u"  (org-speed-move-safe 'outline-up-heading) :exit nil)
    ("j"  org-goto)
    ("g"  (org-refile t))
;;    ("Outline Visibility")
    ("c"  org-cycle :exit nil)
    ("C"  org-shifttab)
    ("SPC"  org-display-outline-path)
    ("s"  org-narrow-to-subtree)
    ("="  org-columns)
;;    ("Outline Structure Editing")
    ("U"  org-shiftmetaup)
    ("D"  org-shiftmetadown)
    ("r"  org-metaright)
    ("l"  org-metaleft)
    ("R"  org-shiftmetaright)
    ("L"  org-shiftmetaleft)
    ("i"  (progn (forward-char 1) (call-interactively
				    'org-insert-heading-respect-content)))
    ("^"  org-sort)
    ("w"  org-refile)
    ("a"  org-archive-subtree-default-with-confirmation)
    ("@"  org-mark-subtree)
    ("#"  org-toggle-comment)
;;    ("Clock Commands")
    ("I"  org-clock-in)
    ("O"  org-clock-out)
;;    ("Meta Data Editing")
    ("t"  org-todo)
    (","  (org-priority))
    ("0"  (org-priority ?\ ))
    ("1"  (org-priority ?A))
    ("2"  (org-priority ?B))
    ("3"  (org-priority ?C))
    (":"  org-set-tags-command)
    ("e"  org-set-effort)
    ("E"  org-inc-effort)
    ("W"  (lambda(m) (interactive "sMinutes before warning: ")
	     (org-entry-put (point) "APPT_WARNTIME" m)))
;;    ("Agenda Views etc")
    ("v"  org-agenda)
    ("/"  org-sparse-tree)
;;    ("Misc")
    ("o"  org-open-at-point)
    ("?"  org-speed-command-help)
    ("<"  (org-agenda-set-restriction-lock 'subtree))
    (">"  (org-agenda-remove-restriction-lock))
    ("b" 	(hydra-pop) "back")
    ("q" 	 nil  "quit")  
    )

(defhydra hydra-my-jump-back (:pre (progn (setq my-hydra-mode (propertize "j-back" 'face '(:foreground "orange")))
				     (force-mode-line-update))
  		         :before-exit (progn (setq my-hydra-mode "")(force-mode-line-update))
                         :idle 0
			 :color teal)
"
_f_: forward _b_: backward      _c_: clear  _s_: set  _p_: pop
_l_: last    _o_: back to move  _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
("f" point-stack-forward :exit nil)
("l" (progn (point-stack-last)
	    (hydra-my-move/body)):exit t)
("b" point-stack-backward :exit nil)
("n" point-stack-forward :exit nil)
("p" point-stack-backward :exit nil)
("c" (progn (point-stack-clear)
	    (hydra-my-move/body)):exit t)
("s" (progn (point-stack-push)
	    (hydra-my-move/body)):exit t)
("d" (progn (point-stack-delete)
 	    (hydra-my-move/body)):exit t)
  ("o" 	hydra-my-move/body :exit t)	    
  ("M-o" 	hydra-my-move/body :exit t)
  ("M-h" (if hydra-is-helpful
	   (setq hydra-is-helpful nil)
	 (setq hydra-is-helpful t)) :exit nil)  
 ("q" nil)
 )

(defhydra hydra-my-move-insert (:pre (progn (setq my-hydra-mode (propertize "insert" 'face '(:foreground "orange")))
				      )
  		         :before-exit (progn (setq my-hydra-mode "")(force-mode-line-update))
                         :idle 0
			 :color pink)
  ""
  ("M-o" 	(hydra-pop) :exit t)
  ("M-;" 	(hydra-pop) :exit t)  
  ("M-j" avy-goto-word-1 :exit nil)
  ("0" (insert-char #x30) :exit nil)    
  ("1" (insert-char #x31) :exit nil)
  ("2" (insert-char #x32) :exit nil)
  ("3" (insert-char #x33) :exit nil)
  ("4" (insert-char #x34) :exit nil)
  ("5" (insert-char #x35) :exit nil)
  ("6" (insert-char #x36) :exit nil)
  ("7" (insert-char #x37) :exit nil)
  ("8" (insert-char #x38) :exit nil)
  ("9" (insert-char #x39) :exit nil)
  ("-" (insert-char #x2D) :exit nil)      
  )

(global-set-key
   (kbd "M-;")
(defhydra hydra-my-move (:pre (progn (setq my-hydra-mode (propertize "move" 'face '(:foreground "orange")))
				     (force-mode-line-update))
  		         :before-exit (progn (setq my-hydra-mode "")(force-mode-line-update))
                         :idle 0
			 :color pink)
"
_c_: comment-region _j_: ace-jump  _M-t_: hs-toggle-hiding _M-h_: help             _g_: goto-line
_m_: set-mark       _w_: save      _S_:   hs-show-block    _H_:   hs-hide-block    _k_: delete-line   
_._: end-of-buffer  _u_: undo      _M-w_: kill             _M-t_: hs-toggle-hiding _d_: delete-char  
_l_: recent-top     _y_: yank      _M-H_: hs-hide-all      _M-S_: hs-show-all      _q_: quit
^---^------------^----------^-----------------^-----^-----------------
"
  ("SPC SPC" (insert-char #x20) :exit nil)
  ("SPC q" rtags-find-symbol :exit nil)
  ("SPC o" (hydra-my-jump-back/body) :exit t)  
  ("SPC p" point-to-register :exit nil)
  ("SPC j" jump-to-register :exit nil)  
  ("SPC r" ivy-resume :exit nil)
  ("SPC x" counsel-M-x :exit nil)
  ("SPC b" ivy-switch-buffer :exit nil)     
  ("SPC s" swiper :exit nil)
  ("SPC i" counsel-imenu :exit nil)  
  ("SPC t" (counsel-ag (thing-at-point 'symbol) cscope-initial-directory (format "-E %s/%s" cscope-initial-directory cscope-index-file) nil) :exit nil) 
  ("t" (counsel-ag (thing-at-point 'symbol) cscope-initial-directory (format "-E %s/%s" cscope-initial-directory cscope-index-file) nil) :exit nil)

  ;;etags
  ("SPC es" my-etags-find-tag :exit nil)
  ("SPC ep" pop-tag-mark :exit nil)
  ;;file
  ("SPC ff" counsel-find-file :exit nil)  
  ("SPC fc" my-key/ivy-cscope-file :exit nil)
  ("SPC fa" (switch-to-buffer "*scratch*") :exit nil)
  ("SPC fm" (switch-to-buffer "*Messages*") :exit nil)
  ("SPC fc" (find-file "~/.emacs.conf/emacs.conf") :exit nil)
  ("SPC fk" (find-file "~/.emacs.conf/emacs_key.conf") :exit nil)
  ("SPC fo" (find-file "~/.emacs.conf/other.lisp") :exit nil)
  ("SPC fp" (find-file "~/.emacs.conf/package.conf") :exit nil)
  ("SPC fs" (progn (my-enter-shell)(delete-other-windows)) :exit nil)
  ;;cscope
  ("SPC cg" cscope-find-global-definition :exit nil)
  ("SPC ct" cscope-find-this-text-string :exit nil)
  ("SPC cs" cscope-find-this-symbol :exit nil)  
  ("SPC cf" cscope-find-this-file :exit nil)
  ("SPC ce" cscope-find-egrep-pattern :exit nil)
  ("SPC ci" cscope-set-initial-directory :exit nil)
  ("SPC cc" cscope-find-functions-calling-this-function :exit nil)
  ("SPC cp" cscope-pop-mark :exit nil)  
  
  ("c" comment-or-uncomment-region :exit nil)
  ("n" (lambda() (interactive)
	 (if (eq symbol-overlay-map (get-char-property (point) 'keymap))
	     (symbol-overlay-jump-next)
	   (next-line))) :exit nil)
  ("p" (lambda() (interactive)
	 (if (eq symbol-overlay-map (get-char-property (point) 'keymap))
	     (symbol-overlay-jump-prev)
	   (previous-line))) :exit nil)
  ("i" (lambda() (interactive)
	 (if (eq symbol-overlay-map (get-char-property (point) 'keymap))
	     (progn
	       (symbol-overlay-put)
	       (hydra-my-move/body))
	   (progn
             (hydra-my-move-insert/body)
             (hydra-push '(hydra-my-move/body))) )) :exit t)
  
  ("f" forward-char :exit nil)
  ("w" kill-ring-save :exit nil)
  ("M-w" kill-region :exit nil)
  ("g" goto-line :exit nil)
  ("s" save-buffer :exit nil)  
  ("d" delete-char :exit nil)
  ("k" kill-line :exit nil)
  ("o" other-window :exit nil)
  ("x" (save-buffers-kill-terminal))  
  ("u" undo :exit nil)
  ("y" yank :exit nil)
  ("m" set-mark-command :exit nil)
  ("M-h" (if hydra-is-helpful
	   (setq hydra-is-helpful nil)
	 (setq hydra-is-helpful t)) :exit nil)  
;;  ("RET" newline :exit nil)
;;  ("DEL" delete-backward-char :exit nil)  
;;  ("SPC" (insert-char #x20) :exit nil)
  ("b" backward-char :exit nil)
  ("F" forward-word :exit nil)
  ("B" backward-word :exit nil)
  ("a" beginning-of-line :exit nil)
  ("e" move-end-of-line :exit nil)
  ("v" scroll-up-command :exit nil)
  ("V" scroll-down-command :exit nil)
  ("l" recenter-top-bottom :exit nil)
  ("," beginning-of-buffer :exit nil)
  ("." end-of-buffer :exit nil)
  ("j" avy-goto-word-1 :exit nil)
  ;; hideshow
  ("M-t" hs-toggle-hiding :exit nil)
  ("S" hs-show-block :exit nil)
  ("H" hs-hide-block :exit nil)
  ("M-S" hs-show-all :exit nil)
  ("M-H" hs-hide-all :exit nil)
  ("(" (progn
	 (insert-char #x28)
	 (yank)
	 (insert-char #x29)) :exit nil)
  ("M-o" (hydra-my-first-menu/body) :exit t)


  
;;  ("q" (progn
;;	 (if (eq major-mode 'term-mode)
;;	 (term-char-mode))
;;	 nil)  "quit")
  ("q" nil "quit")  
))

