* OnInit
** Processor:       msg.Processor
var Processor = json.NewProcessor()

** AgentChanRPC:    game.ChanRPC

* func (gate *Gate) Run(closeSig chan bool)
** 设置NewAgent接口
tcpServer.NewAgent = func(conn *network.TCPConn) network.Agent {
	a := &agent{conn: conn, gate: gate}
	if gate.AgentChanRPC != nil {
		gate.AgentChanRPC.Go("NewAgent", a)
	}
	return a
}
** 启动tcp服务器 tcpServer.Start()
开线程 go server.run()

** func (server *TCPServer) run()
*** 接受连接
conn, err := server.ln.Accept()
tcpConn := newTCPConn(conn, server.PendingWriteNum, server.msgParser)  //里面开了线程进行send操作
agent := server.NewAgent(tcpConn)     //上面设置过
go func() {
	agent.Run()

* agent 的运行 
func (a *agent) Run() {

** data, err := a.conn.ReadMsg()

* todo
conn: tcpConn := newTCPConn(conn, server.PendingWriteNum, server.msgParser)
agent: agent := server.NewAgent(tcpConn)     //上面设置过
MsgParser: msgParser := NewMsgParser()

* server
有TCPServer和WSServer, 暂时只看TCPServer
var tcpServer *network.TCPServer
** 定义了NewAgent的方法:
		tcpServer.NewAgent = func(conn *network.TCPConn) network.Agent {
			a := &agent{conn: conn, gate: gate}
			if gate.AgentChanRPC != nil {
				gate.AgentChanRPC.Go("NewAgent", a)
			}
			return a
		}

** 调用start
		tcpServer.Start()

*** 初始化 server.init()
开始监听 	ln, err := net.Listen("tcp", server.Addr)
设置msgParser   msgParser := NewMsgParser()

*** 开线程运行server go server.run()
接受连接        conn, err := server.ln.Accept()
创建conn        tcpConn := newTCPConn(conn, server.PendingWriteNum, server.msgParser)
创建agent       agent := server.NewAgent(tcpConn)
开线程运行agent
		go func() {
			agent.Run()
			// cleanup
			tcpConn.Close()


** 等待关闭信号
	<-closeSig
	tcpServer.Close()

* conn
** 创建TCPConn
tcpConn := newTCPConn(conn, server.PendingWriteNum, server.msgParser)
*** 创建write队列，设置msgParser
	tcpConn.writeChan = make(chan []byte, pendingWriteNum)
	tcpConn.msgParser = msgParser

*** 开线程发送数据
从writeChan读数据发送出去

* agent
开线程运行 func (a *agent) Run() {
** 读数据
data, err := a.conn.ReadMsg()
实际调用的是func (p *MsgParser) Read(conn *TCPConn) ([]byte, error) {   
** 解包
msg, err := a.gate.Processor.Unmarshal(data)
** 路由
a.gate.Processor.Route(msg, a)

