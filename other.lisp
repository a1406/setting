(require 'gdb-mi)
(defun gamesrv-gdb ()
  (interactive)
  (let* ((srv_pid
    (with-temp-buffer
      (insert-file-contents "game_srv/pid.txt")
      (buffer-string)))
	 (cmd1 (gud-val 'command-name 'gdb))
	 (cmd2 (format "%s game_srv/game_srv -p %s" cmd1 srv_pid))
	 )
;;    (setq gud-gdb-history (list cmd2))
    (gdb cmd2)
    )
  )


(defun my_make_path (path n)
  (let ((i 0)
	(ret "")
	)
    (while (< i n)
      (setq ret (format "%s/%s" ret (nth i path)))
      (setq i (+ i 1))
      )
    (format "%s/" ret)
    )
  )

(defun my_find-cscope-files ()
  (let* ((pre "")
	 (bfind nil)
	 (path (split-string (expand-file-name default-directory) "/"))
	 (i (- (length path) 1))
	 (cwd "")
	 )
    (while (>= i 0)
      (setq cwd (my_make_path path i))
      (if (file-exists-p (format "%scscope.files" cwd))
	  (progn (setq i (- i 1000))
		(setq bfind t)
		(message "find pre = %s" cwd)
		)
	)
      (setq i (- i 1)))
    (if bfind
	cwd
      nil)
    )
  )
