* 内存泄漏和valgrind
** resty -e 可以测试
如下指令可以使用valgrind测试内存泄漏得信息
/usr/local/openresty/bin/resty --valgrind --valgrind-opts "--suppressions=./gw.supp --leak-check=full"  -e "local ffi = require 'ffi'; ffi.cdef[[        void *malloc(size_t size); ]];local a = ffi.gc(ffi.C.malloc(1000), ffi.C.free)   a = nil; print('hello');"

** supp文件得自动生成
通过 --gen-suppressions=all 生成
/usr/local/openresty/bin/resty --valgrind --valgrind-opts "--gen-suppressions=all --suppressions=./gw.supp --leak-check=full"  -e "local ffi = require 'ffi'; ffi.cdef[[        void *malloc(size_t size); ]];local a = ffi.C.malloc(1000); ffi.C.free(a);  a = nil; print('hello');"

* table得扩展
** 预分配内存table.new table.clear
table.new(narray, nhash) 可以预分配table得内存
table.clear() 会清空内容，但是保留内存

** table.isempty
/usr/local/openresty/bin/resty -e "local t_empty = require 'table.isempty';local a = {a= 100, b = 200, c = 300, [1] = 3, [5] = 4}; print(t_empty(a));"

** table.isarray 
/usr/local/openresty/bin/resty -e "local t_array = require 'table.isarray';local a = {a=2,[1] = 33}; print(t_array(a));"
false

/usr/local/openresty/bin/resty -e "local t_array = require 'table.isarray';local a = {[10] = 33}; print(t_array(a));"
true

/usr/local/openresty/bin/resty -e "local t_array = require 'table.isarray';local a = {}; print(t_array(a));"
true

** table.nkeys 
/usr/local/openresty/bin/resty -e "local t_n = require 'table.nkeys';local a = {a = 100, b = 300, [3] = 33}; print(t_n(a));"
3

** table.clone

* json 编码时无法区分 array 和 dict
** 全局修改
cjson.encode_empty_table_as_object(false)

** 初始化
local t = cjson.empty_array

** metatable
local t = {}setmetatable(t, cjson.empty_array_mt)

* cosocket 使用连接池
local ok, err = sock:setkeepalive(2 * 1000, 100)

* 非阻塞得shell命令
resty -e 'local shell = require "resty.shell"local ok, stdout, stderr, reason, status = shell.run([[echo "hello, world"]]) ngx.say(stdout)'

* 其他文档
除了阅读 lua-resty-core 首页文档外，你还需要把 lua-resty-core/lib/ngx/ 这个目录下的 .md 格式的文档也通读一遍才行。

** balancer.md

** base64.md 做BASE64
#+begin_src lua
local b64 = require("ngx.base64")
local res, err

res = b64.encode_base64url("foo")

res, err = b64.decode_base64url(res)
if not res then
    -- invalid input
    ngx.log(ngx.ERR, err)
end

assert(res == "foo")

#+end_src

** errlog.md

** ocsp.md

** pipe.md 无阻塞得shell命令

** process.md nginx得进程相关得一些命令，包括特权进程，安全退出

** re.md 做正则表达式，包括字符得分隔，查询等
#+begin_src lua
local ngx_re = require "ngx.re"

-- split
local res, err = ngx_re.split("a,b,c,d", ",")
--> res is now {"a", "b", "c", "d"}

-- opt
ngx_re.opt("jit_stack_size", 128 * 1024)
--> the PCRE jit stack can now handle more complex regular expressions
#+end_src

** req.md

** resp.md

** semaphore.md 线程, 协程同步用得信号量

** ssl.md
