* 内存泄漏和valgrind
** resty -e 可以测试
如下指令可以使用valgrind测试内存泄漏得信息
/usr/local/openresty/bin/resty --valgrind --valgrind-opts "--suppressions=./gw.supp --leak-check=full"  -e "local ffi = require 'ffi'; ffi.cdef[[        void *malloc(size_t size); ]];local a = ffi.gc(ffi.C.malloc(1000), ffi.C.free)   a = nil; print('hello');"

** supp文件得自动生成
通过 --gen-suppressions=all 生成
/usr/local/openresty/bin/resty --valgrind --valgrind-opts "--gen-suppressions=all --suppressions=./gw.supp --leak-check=full"  -e "local ffi = require 'ffi'; ffi.cdef[[        void *malloc(size_t size); ]];local a = ffi.C.malloc(1000); ffi.C.free(a);  a = nil; print('hello');"

* table得扩展
** 预分配内存table.new table.clear
table.new(narray, nhash) 可以预分配table得内存
table.clear() 会清空内容，但是保留内存

** table.isempty
/usr/local/openresty/bin/resty -e "local t_empty = require 'table.isempty';local a = {a= 100, b = 200, c = 300, [1] = 3, [5] = 4}; print(t_empty(a));"

** table.isarray 
/usr/local/openresty/bin/resty -e "local t_array = require 'table.isarray';local a = {a=2,[1] = 33}; print(t_array(a));"
false

/usr/local/openresty/bin/resty -e "local t_array = require 'table.isarray';local a = {[10] = 33}; print(t_array(a));"
true

/usr/local/openresty/bin/resty -e "local t_array = require 'table.isarray';local a = {}; print(t_array(a));"
true

** table.nkeys 
/usr/local/openresty/bin/resty -e "local t_n = require 'table.nkeys';local a = {a = 100, b = 300, [3] = 33}; print(t_n(a));"
3

** table.clone

