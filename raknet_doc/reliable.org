* 发送数据得时候设置 reliableMessageNumber
  记录重发的ID号，计算重发时间，加入重发队列resendLinkedListHead, 不过这里没做排序
  ReliabilityLayer::Update
#+begin_src 
	internalPacket->reliableMessageNumber=sendReliableMessageNumberIndex;
	internalPacket->retransmissionTime = congestionManager.GetRTOForRetransmission(internalPacket->timesSent+1);
	internalPacket->nextActionTime = internalPacket->retransmissionTime+time;

	InsertPacketIntoResendList( internalPacket, time, true, isReliable);
#+end_src

* 重发
  ReliabilityLayer::Update  
#+begin_src 
				while ( IsResendQueueEmpty()==false )
				{
					internalPacket = resendLinkedListHead;
					RakAssert(internalPacket->messageNumberAssigned==true);

					//if ( internalPacket->nextActionTime < time )
					if ( time - internalPacket->nextActionTime < (((CCTimeType)-1)/2) )
					{
						nextPacketBitLength = internalPacket->headerLength + internalPacket->dataBitLength;
						if ( datagramSizeSoFar + nextPacketBitLength > GetMaxDatagramSizeExcludingMessageHeaderBits() )
						{
							// Gathers all PushPackets()
							PushDatagram();
							break;
						}

						PopListHead(false);

						CC_DEBUG_PRINTF_2("Rs %i ", internalPacket->reliableMessageNumber.val);

						bpsMetrics[(int) USER_MESSAGE_BYTES_RESENT].Push1(time,BITS_TO_BYTES(internalPacket->dataBitLength));

						// Testing1
// 						if (internalPacket->reliability==RELIABLE_ORDERED || internalPacket->reliability==RELIABLE_ORDERED_WITH_ACK_RECEIPT)
// 							printf("RESEND reliableMessageNumber %i with datagram %i\n", internalPacket->reliableMessageNumber.val, congestionManager.GetNextDatagramSequenceNumber().val);

						PushPacket(time,internalPacket,true); // Affects GetNewTransmissionBandwidth()
						internalPacket->timesSent++;
						congestionManager.OnResend(time, internalPacket->nextActionTime);
						internalPacket->retransmissionTime = congestionManager.GetRTOForRetransmission(internalPacket->timesSent);
						internalPacket->nextActionTime = internalPacket->retransmissionTime+time;
#+end_src

** resendBuffer

* 收到reliable的回包
  unsigned ReliabilityLayer::RemovePacketFromResendListAndDeleteOlderReliableSequenced( const MessageNumberType messageNumber, CCTimeType time, DataStructures::List<PluginInterface2*> &messageHandlerList, const SystemAddress &systemAddress )


* 几个数据包里的字段
** datagramNumber
包头上的字段，表示包的id, ack 和datagramNumber对应来表示包收到
一个包里面可能包含多个逻辑上的数据包, 一个ack收到表示这些逻辑上的数据包都收到了
   
** reliability
可靠性的类型

** sendtime   
发送的次数，或者说重发的次数
   
** sendReceiptSerial
本地记录的一个号码，用来在比如RELIABLE_WITH_ACK_RECEIPT类型的回调上的。还是通过datagramNumber的ack来确认收报，然后取到本地的sendReceiptSerial做回调用

** reliableMessageNumber   
RELIABLE 相关类型的seq

** orderingIndex
收包方用来判断包是否是旧包
每个orderingChannel会记录
   
** splitPacketCount splitPacketId splitPacketIndex
分包相关的字段，表示分包的数量，分包的ID，该数据包在分包中的位置
   
** retransmissionTime nextActionTime   
重发的时间


* 滑动窗口
#+begin_src 
	// Maximum amount of bytes that the user can send, e.g. the size of one full datagram
	uint32_t MAXIMUM_MTU_INCLUDING_UDP_HEADER;

	double cwnd; // max bytes on wire
	double ssThresh; // Threshhold between slow start and congestion avoidance

	/// When we get an ack, if oldestUnsentAck==0, set it to the current time
	/// When we send out acks, set oldestUnsentAck to 0
	CCTimeType oldestUnsentAck;

	CCTimeType GetSenderRTOForACK(void) const;

	/// Every outgoing datagram is assigned a sequence number, which increments by 1 every assignment
	DatagramSequenceNumberType nextDatagramSequenceNumber;
	DatagramSequenceNumberType nextCongestionControlBlock;
	bool backoffThisBlock, speedUpThisBlock;
	/// Track which datagram sequence numbers have arrived.
	/// If a sequence number is skipped, send a NAK for all skipped messages
	DatagramSequenceNumberType expectedNextSequenceNumber;

	bool _isContinuousSend;

	bool IsInSlowStart(void) const;

	double lastRtt, estimatedRTT, deviationRtt;
#+end_src

* NAK  
