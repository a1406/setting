
(when (> emacs-major-version 23)
        (require 'package)
        (package-initialize)
	(setq package-archives '(("gnu"   . "http://elpa.zilongshanren.com/gnu/")
                         ("melpa" . "http://elpa.zilongshanren.com/melpa/")))
;;	(setq package-archives '(("melpa" . "http://melpa.milkbox.net/packages/")))
	)
;;        (add-to-list 'package-archives 
;;                     '("melpa" . "http://melpa.milkbox.net/packages/")
;;                     'APPEND))

;;(require 'company-anaconda)
;;(require 'anaconda-mode)
;;;;(package-install  'company-jedi)
;;(package-install 'multiple-cursors)
;;(package-install 'browse-kill-ring)
;;(package-install 'yasnippet)
;;(package-install 'bookmark+)
;;;;(package-install 'hideif)
;;(package-install 'xcscope)
;;;;(package-install 'color-theme)
;;(package-install 'popup)
;;(package-install 'rtags)
;;(package-install 'company)
;;(package-install 'flycheck)
;;(require 'company-c-headers)
;;;;(require 'auto-complete-clang)
;;(package-install 'ace-jump-mode)
;;(package-install 'symbol-overlay)
;;(package-install 'markdown-mode)
;;(package-install 'w3m)
;;(package-install 'hydra)

;;防止helm加载很慢
(setq tramp-ssh-controlmaster-options "-o ControlMaster=auto -o ControlPath='tramp.%%C' -o ControlPersist=no")

(defun revert-all-buffers ()
  "Refreshes all open buffers from their respective files"
  (interactive)
  (let* ((list (buffer-list))
	 (buffer (car list)))
    (while buffer
      (when (and (buffer-file-name buffer)
		 (not (buffer-modified-p buffer)))
	(set-buffer buffer)
	(revert-buffer t t t))
      (setq list (cdr list))
      (setq buffer (car list))))
    (message "Refreshed open files"))

;;(load "desktop") 
;;(desktop-load-default) 
;;(desktop-read)

;;设置Shift+TAB切换至上个buffer
(global-set-key (kbd "<backtab>") #'(lambda ()
                                      (interactive)
                                      (switch-to-buffer (other-buffer (current-buffer) 1))))


;; 高亮括号配对
(electric-pair-mode)
(show-paren-mode t)
(setq show-paren-style 'parenthesis)

(set-frame-font "-adobe-Source Code Pro-normal-normal-normal-*-*-*-*-*-m-0-iso10646-1")

(require 'multiple-cursors)
(require 'browse-kill-ring)
(global-set-key [(control c)(k)] 'browse-kill-ring)
(browse-kill-ring-default-keybindings)

(setq shell-file-name "bash")
(setenv "SHELL" shell-file-name)
(setq explicit-shell-file-name shell-file-name)

;;(defun cygwin-shell()
;;  (interactive)

;;  (shell "*cygwin-shell*")
;;  (set-buffer-process-coding-system 'chinese-iso-8bit 'chinese-iso-8bit)
;;  (delete-other-windows)
;;)

;; enable cygwin clear, default set it does not work
(add-hook 'shell-mode-hook 'n-shell-mode-hook)
(defun n-shell-mode-hook ()
  "12Jan2002 - sailor, shell mode customizations."
;;  (local-set-key '[up] 'comint-previous-input)
;;  (local-set-key '[down] 'comint-next-input)
;;  (local-set-key '[(shift tab)] 'comint-next-matching-input-from-input)
  (setq comint-input-sender 'n-shell-simple-send)
;;  (local-set-key "\C-c." (function rtags-find-symbol))  
  )

(add-hook 'comint-mode-hook 'n-comint-mode-hook)
(defun n-comint-mode-hook ()
  (local-set-key "\C-c." (function rtags-find-symbol))
  )

(defun n-shell-simple-send (proc command)
  "17Jan02 - sailor. Various commands pre-processing before sending to shell."
  (cond
   ;; Checking for clear command and execute it.
   ((string-match "^[ \t]*clear[ \t]*$" command)
    (comint-send-string proc "\n")
    (erase-buffer)
    )
   ;; Checking for man command and execute it.
   ((string-match "^[ \t]*man[ \t]*" command)
    (comint-send-string proc "\n")
    (setq command (replace-regexp-in-string "^[ \t]*man[ \t]*" "" command))
    (setq command (replace-regexp-in-string "[ \t]+$" "" command))
    ;;(message (format "command %s command" command))
    (funcall 'man command)
    )
   ;; Send other commands to the default handler.
   (t (comint-simple-send proc command))
   )
  )

(setq normal-erase-is-backspace-mode 1)

(require 'yasnippet)

(yas/global-mode 1)
;;(require 'auto-complete-config)
;;(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
;;(ac-config-default)

(tool-bar-mode 0)
;;(menu-bar-mode nil)

(autoload 'lua-mode "lua-mode" "Lua editing mode." t)
(add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
(add-to-list 'interpreter-mode-alist '("lua" . lua-mode))

(setq lua-indent-level 8)
(defun my-lua-setup ()
  (setq indent-tabs-mode t))
(add-hook 'lua-mode-hook 'my-lua-setup)

(require 'bookmark+)
(setq bookmark-save-flag 1) 

(require 'hideif)
(require 'xcscope)

(setq time-stamp-active t)
(setq time-stamp-warn-inactive t)
(setq time-stamp-format "%:u %02m/%02d/%04y %02h%02m%02s")

(display-time-mode 1)
(setq display-time-24hr-format t)
(setq display-time-day-and-date t)
(setq display-time-interval 10)

;;Display the pictures in Emacs
(auto-image-file-mode)

;;Directly open tgz file
(auto-compression-mode 1)

(mouse-avoidance-mode 'animate)

(blink-cursor-mode 1)

(setq resize-mini-windows t)

;;Display the column number in mini-bar
(column-number-mode t)

(transient-mark-mode 1)

(setq inhibit-startup-message t)

(setq kill-ring-max 200)

(put 'narrow-to-region 'disabled nil)

(split-window-vertically)


(global-set-key "\C-xm" 'imenu)
(global-set-key "\M-_" 'repeat)
(global-set-key "\C-xc" 'set-mark-command)

(global-set-key "\C-x\C-t" 'toggle-read-only)
(global-set-key "\C-c\C-s" 'shell)
;;(global-set-key "\C-c\C-s" 'ansi-term)
(global-set-key "\C-cm" 'buffer-menu)

;;(global-set-key "\C-h" 'delete-char)
;;(global-set-key "\C-h\C-hk" 'describe-key)
;;(global-set-key "\C-h\C-hw" 'where-is)
(global-set-key "\C-xg" 'goto-line)
(global-set-key "\M-i" 'evil-mode)
(global-set-key "\C-xj" 'jump-to-register)
(global-set-key "\C-o" 'keyboard-quit)

(global-set-key [f1] 'other-window)
(global-set-key [(f3)] 'goto-line)
;;(global-set-key "\C-c\C-g" 'cscope-find-global-definition)
(global-set-key "\C-cg" 'cscope-find-global-definition)
(global-set-key "\C-c\C-i" 'cscope-set-initial-directory)
(global-set-key "\C-ci" 'cscope-pop-mark)
(global-set-key (kbd "C-x RET g") 'cscope-find-global-definition)
(global-set-key "\C-c\C-e" 'cscope-find-called-functions)
(global-set-key "\C-cc" 'cscope-find-functions-calling-this-function)
;;(global-set-key "\C-c\C-e" 'cscope-find-egrep-pattern)
(global-set-key "\C-ce" 'cscope-find-egrep-pattern)

(global-set-key "\C-cn" 'scroll-other-window)
(global-set-key "\C-cp" 'scroll-other-window-down)

;;(global-set-key "\C-c\C-i" 'cscope-find-files-including-file)
(global-set-key "\C-cf" 'cscope-find-this-file)
(global-set-key "\C-c\C-e" 'cscope-find-egrep-pattern)
 
(global-set-key "\C-ct" 'cscope-find-this-text-string)
(global-set-key "\C-cs" 'cscope-find-this-symbol)

(add-hook 'write-file-hooks 'time-stamp)


;; Here's a sample .emacs file that might help you along the way.  Just
;; copy this region and paste it into your .emacs file.  You may want to
;; change some of the actual values.

(defconst my-c-style
  '((c-tab-always-indent        . t)
    (c-comment-only-line-offset . 4)
    (c-hanging-braces-alist     . ((substatement-open after)
				   (brace-list-open)))
    (c-hanging-colons-alist     . ((member-init-intro before)
				   (inher-intro)
				   (case-label after)
				   (label after)
				   (access-label after)))
    (c-cleanup-list             . (scope-operator
				   empty-defun-braces
				   defun-close-semi))
    (c-offsets-alist            . ((arglist-close . c-lineup-arglist)
				   (substatement-open . 0)
				   (label . nil)
				   (arglist-cont-nonempty  . 4)
				   (case-label        . 4)
				   (block-open        . 0)
				   (knr-argdecl-intro . -)))
    (c-echo-syntactic-information-p . t)
    )
  "My C Programming Style")

;; offset customizations not in my-c-style
(setq c-offsets-alist '((member-init-intro . ++)))

;; Customizations for all modes in CC Mode.
(defun my-c-mode-common-hook ()
  ;; add my personal style and set it for the current buffer
  (hs-minor-mode t)
  (c-add-style "PERSONAL" my-c-style t)
  ;; other customizations
  (setq tab-width 4)
	;; this will make sure spaces are used instead of tabs
;;  (setq indent-tabs-mode nil)
  ;; we like auto-newline and hungry-delete
  ;;(c-toggle-auto-hungry-state nil)
  ;; key bindings for all supported languages.  We can put these in
  ;; c-mode-base-map because c-mode-map, c++-mode-map, objc-mode-map,
  ;; java-mode-map, idl-mode-map, and pike-mode-map inherit from it.
  (local-set-key "\C-m" 'c-context-line-break)
  (local-set-key "\C-c\C-h" 'hs-hide-block)
  (local-set-key "\C-c\C-j" 'hs-show-block)
  (local-set-key "\C-c\C-k" 'hs-show-all)
  (local-set-key "\C-c." (function rtags-find-symbol))    
  )

(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)
(add-hook 'cpp-mode-common-hook 'my-c-mode-common-hook)
(define-key c-mode-base-map "\C-c\C-c"  'comment-or-uncomment-region)

(defun refresh-file ()  
  (interactive)  
  (revert-buffer t (not (buffer-modified-p)) t))  
  
(global-set-key "\C-x\C-r" 'refresh-file)  
;;(global-set-key "\C-x\C-g" 'gdb-many-windows)  

;;(gdb-many-windows t)

;;(require 'color-theme)  
;;(color-theme-initialize)
;;(color-theme-taylor)
;;(color-theme-calm-forest)  
;;hober 
;;midnight
;;oswald
;;billw
;;calm-forest

(org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (sh . t)
   (python . t)
   (R . t)
   (ruby . t)
   (ditaa . t)
   (dot . t)
   (octave . t)
   (sqlite . t)
   (perl . t)
   (C . t)
   (plantuml . t)
   ))

(setq org-plantuml-jar-path
      (expand-file-name "~/.emacs.d/java/plantuml.jar"))

;;(global-set-key "\C-xc" 'auto-complete)

;;(require 'auto-complete-clang)
;;(setq ac-clang-auto-save nil)
;;(setq ac-auto-start t)
;;(setq ac-delay 1)
;;(setq ac-quick-help-delay 0.5)
;; (ac-set-trigger-key "TAB")
;; (define-key ac-mode-map  [(control tab)] 'auto-complete)
;;(define-key ac-mode-map  [(control tab)] 'auto-complete)

;;(defun my-ac-config ()
;;  (setq-default ac-sources '(ac-source-abbrev ac-source-dictionary ac-source-words-in-same-mode-buffers))
;;  (add-hook 'emacs-lisp-mode-hook 'ac-emacs-lisp-mode-setup)
;;  ;; (add-hook 'c-mode-common-hook 'ac-cc-mode-setup)
;;  (add-hook 'ruby-mode-hook 'ac-ruby-mode-setup)
;;  (add-hook 'css-mode-hook 'ac-css-mode-setup)
;;  (add-hook 'auto-complete-mode-hook 'ac-common-setup)
;;  (global-auto-complete-mode t))
;;(defun my-ac-cc-mode-setup ()
;;  (setq ac-sources (append '(ac-source-clang ac-source-yasnippet) ac-sources)))
;;(add-hook 'c-mode-common-hook 'my-ac-cc-mode-setup)
;;ac-source-gtags
;;(my-ac-config)

;;echo "" | g++ -v -x c++ -E - 
;;(setq ac-clang-flags
;;      (mapcar (lambda (item)(concat "-I" item))
;;              (split-string
;;               "
;; /usr/include/c++/5
;; /usr/include/x86_64-linux-gnu/c++/5
;; /usr/include/c++/5/backward
;; /usr/lib/gcc/x86_64-linux-gnu/5/include
;; /usr/local/include
;; /usr/lib/gcc/x86_64-linux-gnu/5/include-fixed
;; /usr/include/x86_64-linux-gnu
;; /usr/include
;; /usr/include/linux
;; /usr/include/diet
;; /home/jacktang/svnroot/XGame/Server/comm_include
;; /home/jacktang/svnroot/XGame/Server/comm_lib/include
;; /home/jacktang/svnroot/XGame/Server/game_srv
;; /home/jacktang/svnroot/XGame/Server/game_srv/so_game_srv
;; /home/jacktang/svnroot/XGame/Server/proto
;; /home/jacktang/svnroot/XGame/Server/thirdlib/libevent/include
;; /home/jacktang/svnroot/XGame/Server/thirdlib/libevent
;; /home/jacktang/svnroot/XGame/Server/comm_game
;; /home/jacktang/svnroot/XGame/Server/excel_data
;;"
;;)))


;;(global-set-key "\M-,"   'etags-select-find-tag)
;;(global-set-key "\M-m"   'helm-etags-select)
;;(global-set-key  "\C-x\C-h"    'helm-find-files)

;;(require 'breadcrumb)
;;(setq bc-bookmark-file "~/vgame.bmk")
;;(global-set-key "\M-p"      'bc-previous)
;;(global-set-key "\M-n"   'bc-next)
;;(global-set-key [M-up]      'bc-local-previous)
;;(global-set-key [M-down]    'bc-local-next)
;;(global-set-key "\C-cl"  'bc-list)
;;(global-set-key  "\C-cj"    'bc-set)
;; bc-file
;; bc-reload


;;; use popup menu for yas-choose-value
(require 'popup)

;; add some shotcuts in popup menu mode
(define-key popup-menu-keymap (kbd "M-n") 'popup-next)
(define-key popup-menu-keymap (kbd "TAB") 'popup-next)
(define-key popup-menu-keymap (kbd "<tab>") 'popup-next)
(define-key popup-menu-keymap (kbd "<backtab>") 'popup-previous)
(define-key popup-menu-keymap (kbd "M-p") 'popup-previous)

(defun yas-popup-isearch-prompt (prompt choices &optional display-fn)
  (when (featurep 'popup)
    (popup-menu*
     (mapcar
      (lambda (choice)
        (popup-make-item
         (or (and display-fn (funcall display-fn choice))
             choice)
         :value choice))
      choices)
     :prompt prompt
     ;; start isearch mode immediately
     :isearch t
     )))
(setq yas-prompt-functions '(yas-popup-isearch-prompt yas-ido-prompt yas-no-prompt))

;; 终端箭头不见了找这两个变量 overlay-arrow-position   overlay-arrow-string
;; 非终端的找 fringe  

;;(add-to-list 'exec-path (expand-file-name "~/gitroot/rtags/bin")) ;; path to rdm/rc
;;(add-to-list 'load-path (expand-file-name "~/gitroot/rtags/src")) ;; path to rtags.el
(rtags-start-process-unless-running)
(require 'rtags)
(require 'flycheck-rtags)
(setq rtags-autostart-diagnostics t)
(setq rtags-use-bookmarks nil)
(rtags-diagnostics)
;;(setq rtags-completions-enabled t)
;;(push 'company-rtags company-backends)
;;(global-company-mode)

;;(setq rtags-socket-file "/home/jacktang/.rdm")


(global-set-key (kbd "M-.") (function rtags-find-symbol-at-point))
(global-set-key (kbd "M-,") (function rtags-find-references-at-point))
(global-set-key (kbd "M-;") (function rtags-find-file))
(global-set-key (kbd "C-.") (function rtags-find-symbol))
(global-set-key (kbd "C-,") (function rtags-find-references))
(global-set-key (kbd "C-<") (function rrtags-find-virtuals-at-point))
;;(global-set-key (kbd "M-i") (function rtags-imenu))
(global-set-key "\C-c." (function rtags-find-symbol))
(global-set-key "\C-c," (function rtags-find-references))
(global-set-key "\C-cu" (function rtags-location-stack-back))
;;(global-set-key "\C-ci" (function rtags-location-stack-forward))
(rtags-enable-standard-keybindings)

(require 'company)
(require 'company-c-headers)
(add-hook 'after-init-hook 'global-company-mode)
(setq company-backends (delete 'company-semantic company-backends))
(add-to-list 'company-backends 'company-c-headers)
;;(add-to-list 'company-backends 'company-jedi)
(add-to-list 'company-c-headers-path-system "/usr/include/c++/5/")
(global-set-key "\C-xc" (function company-complete))

;;(semantic-mode 1)
;;(global-semantic-idle-summary-mode 1)
(winner-mode)

(setq python-shell-interpreter "ipython")
(require 'company-anaconda)
(require 'anaconda-mode)
(add-hook 'python-mode-hook 'anaconda-mode)
(add-hook 'python-mode-hook 'anaconda-eldoc-mode)
(add-to-list 'company-backends 'company-anaconda)

(define-prefix-command 'meta_m)
(global-set-key "\M-m" 'meta_m)
(global-set-key "\M-ml" 'ace-jump-line-mode)
(global-set-key "\M-mp" 'ace-jump-mode)
(global-set-key "\M-mr" 'cua-rectangle-mark-mode)

(global-set-key (kbd "ESC <right>") 'ahs-forward)
(global-set-key (kbd "ESC <left>") 'ahs-backward)

(global-set-key "\C-s" 'helm-occur)

;;浏览器设置
;;(setq browse-url-browser-function 'w3m)
(setq browse-url-browser-function 'browse-url-default-browser)
(setq markdown-command '"pandoc -s --highlight-style zenburn")

;;高亮
(require 'symbol-overlay)
(global-set-key (kbd "M-i") 'symbol-overlay-put)

;;移动光标
(defhydra hydra-look-over (:body-pre)
    "moving"
    ("n" next-line)
    ("p" previous-line)
    ("f" forward-char)
    ("b" backward-char)
    ("F" forward-word)
    ("B" backward-word)
    ("a" beginning-of-line)
    ("e" move-end-of-line)
    ("v" scroll-up-command)
    ("V" scroll-down-command)
    ("l" recenter-top-bottom)
    ("<" beginning-of-buffer)
    (">" end-of-buffer)
    ;; hideshow
    ("t" hs-toggle-hiding)
    ("s" hs-show-block)
    ("h" hs-hide-block)
    ("S" hs-show-all)
    ("H" hs-hide-all)
    ("q" nil))
(global-set-key (kbd "C-c n") 'hydra-look-over/body)


;; 避免卡住放在最后面
(setq auto-save-hook nil)
