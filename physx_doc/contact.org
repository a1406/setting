* 四元数
q1q2 = [st − v · u, su + tv + v × u]

Q = cos(θ/2) + sin(θ/2) * A
QQ = [cos(θ/2) * cos(θ/2) - A · A, 2 * sin(θ/2) * A]
   = [cos(θ/2) * cos(θ/2) - 1, 2 * sin(θ/2) * A]

* 旋转得一般公式
v′ = cos(θ)v + sin(θ)(u × v) + (1 − cos(θ))(u · v)u
cos2θ = cos(θ + θ) = cosθ * cosθ - sinθ * sinθ = 2 * cosθ * cosθ - 1 = 1 - 2 * sinθ * sinθ
sin2θ = sin(θ + θ) = sinθ * cosθ + cosθ * sinθ = 2 * sinθ * cosθ
#+begin_src C++
  PX_CUDA_CALLABLE PX_FORCE_INLINE const PxVec3 rotate(const PxVec3& v) const
  {
  // q = [cos(θ/2), sin(θ/2) * A]
  // x = sin(θ/2) * u.x
  // w = cos(θ/2)
  // vx = v.x * 2
  // w2 = 1/2 * cos(θ)
  // dot2 = 2 * sin(θ/2) * u.x * v.x + ... = 2 * sin(θ/2) * (u · v)

  // vx * w2 = v.x * cos(θ)
  // (y * vz - z * vy) * w = 2 * sin(θ/2) * (u × v) * cos(θ/2) = sinθ * (u × v)
  // x * dot2 = sin(θ/2) * u.x * 2 * sin(θ/2) * (u · v) = 2 * sin(θ/2) * sin(θ/2) * (u · v) * u.x = (1 - cos(θ)) * (u · v) * u.x

	  const float vx = 2.0f * v.x;
	  const float vy = 2.0f * v.y;
	  const float vz = 2.0f * v.z;
	  const float w2 = w * w - 0.5f;
	  const float dot2 = (x * vx + y * vy + z * vz);
	  return PxVec3((vx * w2 + (y * vz - z * vy) * w + x * dot2), (vy * w2 + (z * vx - x * vz) * w + y * dot2),
			(vz * w2 + (x * vy - y * vx) * w + z * dot2));
  }
#+end_src


* PxQuat::rotateInv
#+begin_src C++
PX_CUDA_CALLABLE PX_FORCE_INLINE const PxVec3 rotateInv(const PxVec3& v) const
{
  // q = [cos(θ/2), -sin(θ/2) * A]
  // x = -sin(θ/2) * u.x
  // w = cos(θ/2)
  // vx = v.x * 2
  // w2 = 1/2 * cos(θ)
  // dot2 = -2 * sin(θ/2) * u.x * v.x + ... = -2 * sin(θ/2) * (u · v)

  // vx * w2 = v.x * cos(θ)
  // (y * vz - z * vy) * w = -2 * sin(θ/2) * (u × v) * cos(θ/2) = -sinθ * (u × v)
  // x * dot2 = -sin(θ/2) * u.x * -2 * sin(θ/2) * (u · v) = 2 * sin(θ/2) * sin(θ/2) * (u · v) * u.x = (1 - cos(θ)) * (u · v) * u.x

	const float vx = 2.0f * v.x;
	const float vy = 2.0f * v.y;
	const float vz = 2.0f * v.z;
	const float w2 = w * w - 0.5f;	// 1/2 cos(x)
	const float dot2 = (x * vx + y * vy + z * vz);	// 旋转轴和坐标得点乘 * 2
	return PxVec3((vx * w2 - (y * vz - z * vy) * w + x * dot2), (vy * w2 - (z * vx - x * vz) * w + y * dot2),
		      (vz * w2 - (x * vy - y * vx) * w + z * dot2));
//   v * cos(*)
// - (x,y,z) CROSS v * cos(*)
// + (x,y,z) * 2 * ((x, y, z) DOT v)
}  
#+end_src

* PsTransformV::transformInv
#+begin_src C++
PX_FORCE_INLINE PsTransformV transformInv(const PsTransformV& src) const
{
	PX_ASSERT(src.isSane());
	PX_ASSERT(isFinite());
	// src = [srct, srcr] -> [r^-1*(srct-t), r^-1*srcr]
	/*PxQuat qinv = q.getConjugate();
	return PxTransform(qinv.rotate(src.p - p), qinv*src.q);*/
	const QuatV qinv = QuatConjugate(q);
	const Vec3V v = QuatRotate(qinv, V3Sub(src.p, p));
	const QuatV rot = QuatMul(qinv, src.q);
	return PsTransformV(v, rot);
}
#+end_src


* g_PCMContactMethodTable
定义了各类型得碰撞检测函数
#+begin_src C++
const PxcContactMethod conMethod = g_PCMContactMethodTable[type0][type1];
conMethod(shape0->geometry, shape1->geometry, *tm0, *tm1, context.mNarrowPhaseParams, cache, context.mContactBuffer, &context.mRenderOutput);  
#+end_src

* PxcPCMContactSphereSphere 球球
** 碰撞判断
从transform0取位置
从shapeSphere0.radius取半径
从params.mContactDistance取允许得距离
用距离得平方 与 半径加上允许得距离得平方比较，判断是否碰撞

** 碰撞点
对距离取sqrt
对距离向量归一化，得到碰撞法线
对一个球做法线乘以半径加上位置, 得到碰撞点
距离减半径，得到碰撞深度

碰撞法线 保存在 contact.normal
碰撞点   保存在 contact.point
碰撞深度 保存在 contact.separation
碰撞面   保存在 contact.internalFaceIndex1, 球体是PXC_CONTACT_NO_FACE_INDEX

* PxcPCMContactSpherePlane 球面
** 碰撞判断
从transform1.q取面得旋转
把球得坐标转换到面得坐标系下 transf1.transformInv(p0)
把球得X轴坐标减去半径，和允许得距离比较 (为啥是X? 要看上一步坐标系转换得实现)
原来，四元数PxQuat表示旋转的时候，x,y,z,w是归一化的，并且x,y,z表示旋转轴,w 表示cos(*/2), 0方向是(1,0,0)
** 碰撞点


* PxcPCMContactSphereCapsule 球胶囊体
** 碰撞判断
1. 调用QuatGetBasisVector0获取胶囊体的X旋转轴
2. 取到球半径 + 胶囊体半径
3. 取到球心到胶囊体轴的距离PxcDistancePointSegmentSquared
4. 比较2和3的大小判断是否碰撞

*** QuatGetBasisVector0 获取胶囊体的X旋转轴
可以参考test里面的rotateInv4函数里面的v1.x的计算，注意w * w = 1 - x * x - y * y - z * z. 本质上这里就是计算(1,0,0)旋转后的坐标
用(1,0,0)套一下rotate函数即可

#+begin_src C++
/** brief computes rotation of x-axis */
PX_FORCE_INLINE Vec3V QuatGetBasisVector0(const QuatV q)
{
	/*const PxF32 x2 = x*2.0f;
	const PxF32 w2 = w*2.0f;
	return PxVec3(	(w * w2) - 1.0f + x*x2,
	                (z * w2)        + y*x2,
	                (-y * w2)       + z*x2);*/

	const FloatV two = FLoad(2.f);
	const FloatV w = V4GetW(q);
	const Vec3V u = Vec3V_From_Vec4V(q);

	const FloatV x2 = FMul(V3GetX(u), two);
	const FloatV w2 = FMul(w, two);

	const Vec3V a = V3Scale(u, x2);
	const Vec3V tmp = V3Merge(w, V3GetZ(u), FNeg(V3GetY(u)));
	// const Vec3V b = V3Scale(tmp, w2);
	// const Vec3V ab = V3Add(a, b);
	const Vec3V ab = V3ScaleAdd(tmp, w2, a);
	return V3SetX(ab, FSub(V3GetX(ab), FOne()));
}
#+end_src

*** PxcDistancePointSegmentSquared 点到线的距离
点乘，裁剪
#+begin_src C++
PX_FORCE_INLINE Ps::aos::FloatV PxcDistancePointSegmentSquared(const Ps::aos::Vec3VArg a, const Ps::aos::Vec3VArg b, const Ps::aos::Vec3VArg p, Ps::aos::FloatV& param)
{
	using namespace Ps::aos;
	const FloatV zero = FZero();
	const FloatV one = FOne();

	const Vec3V ap = V3Sub(p, a);
	const Vec3V ab = V3Sub(b, a);
	const FloatV nom = V3Dot(ap, ab); // |ao| * |ab|
	
	const FloatV denom = V3Dot(ab, ab); // |ab| * |ab|
	const FloatV tValue = FClamp(FDiv(nom, denom), zero, one); // |ao| / |ab|

	const FloatV t = FSel(FIsEq(denom, zero), zero, tValue); // |ao| / |ab|
	const Vec3V v = V3NegScaleSub(ab, t, ap); // ao - ap = po
	param = t;                       
	return V3Dot(v, v);
}
#+end_src

** 碰撞点

* PxcPCMContactSphereBox
** 碰撞判断
还是先把球的坐标转换到长方体的坐标系
然后和长方体的长宽高相减
对结果做平方，和圆半径的平方比较
** 碰撞点
比较圆心和长宽高，判断圆心是否在长方体内
*** 在长方体内

*** 不在长方体内

* PxcPCMContactSphereConvex
** 碰撞判断


* PxcPCMContactSphereMesh

* PxcPCMContactPlaneCapsule 面胶囊体
** 碰撞判断
胶囊体转到面得坐标系，然后判断
** 碰撞点

* PxcPCMContactPlaneBox

* PxcPCMContactPlaneConvex

* PxcPCMContactCapsuleCapsule 胶囊体胶囊体
** 碰撞判断
和之前那些不同，这次没有转坐标系，而是取到两个胶囊体得中点当作坐标原点来计算(估计是避免世界坐标数字太大)
取到两个胶囊体得中轴线，然后调用函数distanceSegmentSegmentSquared获取线线得最小距离
用这个最小距离来和半径做比较

*** distanceSegmentSegmentSquared
在目录geomutils/src/distance/下有各种距离计算得文件，开一个distance.org来一个个看

* PxcPCMContactCapsuleBox
** 碰撞判断
把胶囊体转换到box的坐标系
获得胶囊体转换后得旋转矩阵

* PxcPCMContactCapsuleConvex

* PxcPCMContactCapsuleMesh

* PxcPCMContactBoxBox 盒子盒子
** 碰撞判断
把box1 转换到box2得坐标系
获得box1 转换后得旋转矩阵

* PxcPCMContactBoxConvex

* PxcPCMContactBoxMesh

* PxcPCMContactConvexConvex 多面体多面体

* PxcPCMContactConvexMesh


