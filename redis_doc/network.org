* 初始化
aeCreateEventLoop

* loop
aeMain

* 监听
#+BEGIN_SRC 
    for (p = servinfo; p != NULL; p = p->ai_next) {
        if ((s = socket(p->ai_family,p->ai_socktype,p->ai_protocol)) == -1)
            continue;

        if (af == AF_INET6 && anetV6Only(err,s) == ANET_ERR) goto error;
        if (anetSetReuseAddr(err,s) == ANET_ERR) goto error;
        if (anetListen(err,s,p->ai_addr,p->ai_addrlen,backlog) == ANET_ERR) s = ANET_ERR;
        goto end;
    }
#+END_SRC

* 连接
** 同步
anetTcpGenericConnect

** 异步
__redisAsyncHandleConnect

* accept
#+BEGIN_SRC 
    /* Create an event handler for accepting new connections in TCP and Unix
     * domain sockets. */
    for (j = 0; j < server.ipfd_count; j++) {
        if (aeCreateFileEvent(server.el, server.ipfd[j], AE_READABLE,
            acceptTcpHandler,NULL) == AE_ERR)
            {
                serverPanic(
                    "Unrecoverable error creating server.ipfd file event.");
            }
    }
#+END_SRC

* send
aeCreateFileEvent

* recv
aeCreateFileEvent

* 断开
freeClient => unlinkClient

redisAsyncDisconnect

* timeout
只是简单的遍历，不能增加太多timeout
但是也不需要反复添加，只要不返回AE_NOMORE就会自动添加
aeCreateTimeEvent
processTimeEvents

* 连接状态
#+BEGIN_SRC 
/* Connection type can be blocking or non-blocking and is set in the
 * least significant bit of the flags field in redisContext. */
#define REDIS_BLOCK 0x1

/* Connection may be disconnected before being free'd. The second bit
 * in the flags field is set when the context is connected. */
#define REDIS_CONNECTED 0x2

/* The async API might try to disconnect cleanly and flush the output
 * buffer and read all subsequent replies before disconnecting.
 * This flag means no new commands can come in and the connection
 * should be terminated once all replies have been read. */
#define REDIS_DISCONNECTING 0x4

/* Flag specific to the async API which means that the context should be clean
 * up as soon as possible. */
#define REDIS_FREEING 0x8

/* Flag that is set when an async callback is executed. */
#define REDIS_IN_CALLBACK 0x10

/* Flag that is set when the async context has one or more subscriptions. */
#define REDIS_SUBSCRIBED 0x20

/* Flag that is set when monitor mode is active */
#define REDIS_MONITORING 0x40

/* Flag that is set when we should set SO_REUSEADDR before calling bind() */
#define REDIS_REUSEADDR 0x80

#define REDIS_KEEPALIVE_INTERVAL 15 /* seconds */

/* number of times we retry to connect in the case of EADDRNOTAVAIL and
 * SO_REUSEADDR is being used. */
#define REDIS_CONNECT_RETRIES  10
#+END_SRC
* 线程 （新版本引入）
我现在来看是有两类线程，一类是网络线程IOThreadMain，一类是bio线程bioProcessBackgroundJobs
线程使用了C11的关键字_Atomic来做原子操作
** IOThreadMain
要配置了server.io_threads_num才会启用
io_threads_pending用来同步主线程和网络线程，确保不会同时操作网络事件队列io_threads_list
然后网络线程在processInputBuffer中处理收到的数据

*** handleClientsWithPendingReadsUsingThreads
把任务交到网络线程去处理, 网络线程先设置CLIENT_PENDING_READ, 网络线程检查CLIENT_PENDING_READ标志后不再继续处理
最后主线程(handleClientsWithPendingReadsUsingThreads函数结尾)再来具体处理以保证逻辑在单线程中运行

** bioProcessBackgroundJobs
