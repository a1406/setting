* slaveof  配置master节点的地址
读取配置，并把server的状态设置成REPL_STATE_CONNECT


* Slave replication state. 
Used in server.repl_state for slaves to remember what to do next.

** REPL_STATE_NONE 状态
没有活动的replication
*** createClient

*** initServerConfig


** REPL_STATE_CONNECT 状态
需要连接master
connectWithMaster后状态变为REPL_STATE_CONNECTING


** REPL_STATE_CONNECTING 状态
正在连接master
连接成功后，syncWithMaster中状态变成REPL_STATE_RECEIVE_PONG并且发送PING给master


** REPL_STATE_RECEIVE_PONG 状态
等待 PING 的返回
收到PONG后，syncWithMaster中状态变成REPL_STATE_SEND_PORT


** REPL_STATE_SEND_PORT 状态
发送 REPLCONF, 参数是监听的端口号
状态变成REPL_STATE_RECEIVE_PORT


** REPL_STATE_RECEIVE_PORT 状态
等待 REPLCONF 的返回
状态变成REPL_STATE_SEND_CAPA;


** REPL_STATE_SEND_CAPA 状态
发送 REPLCONF 的命令，参数是capa eof
状态变成REPL_STATE_RECEIVE_CAPA


** REPL_STATE_RECEIVE_CAPA 状态
等待 REPLCONF 数据的返回
状态变成REPL_STATE_SEND_PSYNC


** REPL_STATE_SEND_PSYNC 状态
调用 slaveTryPartialResynchronization 发送 PSYNC
状态变成REPL_STATE_RECEIVE_PSYNC


** REPL_STATE_RECEIVE_PSYNC 状态
等待 PSYNC 的返回
调用slaveTryPartialResynchronization
把读取数据的处理函数设置成readSyncBulkPayload
状态变成REPL_STATE_TRANSFER
初始化server.repl_transfer_* 相关参数

** REPL_STATE_TRANSFER 状态
从master接收.rdb文件
完成后，调用ordbLoad读取rdb文件，调用replicationCreateMasterClient把状态设置成REPL_STATE_CONNECTED, 并且启动AOF


** REPL_STATE_CONNECTED 状态
连接master成功



* State of slaves from the POV of the master. 
Used in client->replstate.
In SEND_BULK and ONLINE state the slave receives new updates
in its output queue. In the WAIT_BGSAVE states instead the server is waiting
to start the next background saving in order to send updates to it. */

** SLAVE_STATE_WAIT_BGSAVE_START
需要生成新的RDB文件

** SLAVE_STATE_WAIT_BGSAVE_END
正在生成RDB文件

** SLAVE_STATE_SEND_BULK
发送RDB文件给slave

** SLAVE_STATE_ONLINE
RDB文件发送完成


* replicationFeedSlaves
同步到slave

* masterTryPartialResynchronization
slave连上来，服务器检查能否使用增量更新同步过去, 这里主要检查的是两个slave发过来的参数，master_replid和psync_offset
对应的是replid和reploff

c->reploff = c->read_reploff - sdslen(c->querybuf);

** replicationCreateMasterClient
server.master->reploff = server.master_initial_offset;
memcpy(server.master->replid, server.master_replid,

slaveTryPartialResynchronization     全量更新的时候设置
replicationCacheMasterUsingMyself    设置成slave的时候   server.master_initial_offset = server.master_repl_offset;
addReplyReplicationBacklog           增量更新的时候，发送增量数据给slave
