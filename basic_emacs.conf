(custom-set-variables
  '(initial-frame-alist (quote ((fullscreen . fullscreen)))))
;; '(initial-frame-alist (quote ((fullscreen . maximized)))))

(when (> emacs-major-version 23)
  (require 'package)
  (if (not package--initialized)
      (package-initialize))
;;  (setq package-archives '(("gnu"   . "http://elpa.zilongshanren.com/gnu/")
;;			   ("melpa" . "http://elpa.zilongshanren.com/melpa/")))
  (setq package-archives '(
			   ("melpa" . "http://mirrors.163.com/elpa/melpa/")
			   ("gnu"   . "http://mirrors.163.com/elpa/gnu/")
			   ))
  ;;	(setq package-archives '(("melpa" . "http://melpa.milkbox.net/packages/")))
  )

(tool-bar-mode 0)
;;(menu-bar-mode nil)

(setq time-stamp-active t)
(setq time-stamp-warn-inactive t)
(setq time-stamp-format "%:u %02m/%02d/%04y %02h%02m%02s")

(display-time-mode 1)
(setq display-time-24hr-format t)
(setq display-time-day-and-date t)
(setq display-time-interval 10)

;;Display the pictures in Emacs
(auto-image-file-mode)

;;Directly open tgz file
(auto-compression-mode 1)

(mouse-avoidance-mode 'animate)

(blink-cursor-mode 1)

(setq resize-mini-windows t)

;;Display the column number in mini-bar
(column-number-mode t)

(transient-mark-mode 1)

(setq inhibit-startup-message t)

(put 'narrow-to-region 'disabled nil)

(split-window-vertically)


(global-set-key "\C-xm" 'imenu)
(global-set-key "\M-_" 'repeat)
(global-set-key "\C-xc" 'set-mark-command)

(global-set-key "\C-x\C-t" 'toggle-read-only)
(global-set-key "\C-c\C-s" 'shell)
;;(global-set-key "\C-c\C-s" 'ansi-term)
(global-set-key "\C-cm" 'buffer-menu)

;;(global-set-key "\C-h" 'delete-char)
;;(global-set-key "\C-h\C-hk" 'describe-key)
;;(global-set-key "\C-h\C-hw" 'where-is)
(global-set-key "\C-xg" 'goto-line)
(global-set-key "\C-xj" 'jump-to-register)
(global-set-key "\C-o" 'keyboard-quit)

(global-set-key "\C-cn" 'scroll-other-window)
(global-set-key "\C-cp" 'scroll-other-window-down)

(define-prefix-command 'meta_m)
(global-set-key "\M-m" 'meta_m)
(global-set-key "\M-ml" 'ace-jump-line-mode)
(global-set-key "\M-mp" 'ace-jump-mode)
(global-set-key "\M-mr" 'cua-rectangle-mark-mode)

(add-hook 'write-file-hooks 'time-stamp)

(defconst my-c-style
  '((c-tab-always-indent        . t)
    (c-comment-only-line-offset . 4)
    (c-hanging-braces-alist     . ((substatement-open after)
				   (brace-list-open)))
    (c-hanging-colons-alist     . ((member-init-intro before)
				   (inher-intro)
				   (case-label after)
				   (label after)
				   (access-label after)))
    (c-cleanup-list             . (scope-operator
				   empty-defun-braces
				   defun-close-semi))
    (c-offsets-alist            . ((arglist-close . c-lineup-arglist)
				   (substatement-open . 0)
				   (label . nil)
				   (arglist-cont-nonempty  . 4)
				   (case-label        . 4)
				   (block-open        . 0)
				   (knr-argdecl-intro . -)))
    (c-echo-syntactic-information-p . t)
    )
  "My C Programming Style")

;; offset customizations not in my-c-style
(setq c-offsets-alist '((member-init-intro . ++)))

;; Customizations for all modes in CC Mode.
(defun my-c-mode-common-hook ()
  ;; add my personal style and set it for the current buffer
  (hs-minor-mode t)
;;  (auto-highlight-symbol-mode t)
  (c-add-style "PERSONAL" my-c-style t)
  ;; other customizations
  (setq tab-width 4)
	;; this will make sure spaces are used instead of tabs
;;  (setq indent-tabs-mode nil)
  ;; we like auto-newline and hungry-delete
  ;;(c-toggle-auto-hungry-state nil)
  ;; key bindings for all supported languages.  We can put these in
  ;; c-mode-base-map because c-mode-map, c++-mode-map, objc-mode-map,
  ;; java-mode-map, idl-mode-map, and pike-mode-map inherit from it.
  (local-set-key "\C-m" 'c-context-line-break)
  (local-set-key "\C-c\C-h" 'hs-hide-block)
  (local-set-key "\C-c\C-j" 'hs-show-block)
  (local-set-key "\C-c\C-k" 'hs-show-all)
  (local-set-key "\C-c." (function rtags-find-symbol))    
  )

(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)
(add-hook 'cpp-mode-common-hook 'my-c-mode-common-hook)

(defun refresh-file ()  
  (interactive)  
  (revert-buffer t (not (buffer-modified-p)) t))  
  
(global-set-key "\C-x\C-r" 'refresh-file)  
(setq python-shell-interpreter "ipython")

(setq auto-save-hook nil)


(setq pfl-packages
      '(
	evil
	))

;; refresh package list if it is not already available
(when (not package-archive-contents) (package-refresh-contents))

;; install packages from the list that are not yet installed
(dolist (pkg pfl-packages)
  (if (not (package-installed-p pkg))
      (if (assoc pkg package-archive-contents)
	  (package-install pkg)
	(progn   (package-refresh-contents)
		 (package-install pkg)))))


(define-key key-translation-map (kbd "M-SPC") (kbd "C-g"))
(define-key key-translation-map (kbd "s-SPC") (kbd "C-g"))

(require 'evil)
(require 'json)
(setq evil-default-state 'emacs)
(setq evil-insert-state-modes '())
(setq evil-motion-state-modes '())
(setq evil-want-abbrev-expand-on-insert-exit nil)
(setq evil-want-integration nil)
(setq evil-want-keybinding nil)
(setq evil-want-minibuffer nil)
(defun evil-generate-mode-line-tag (&optional state)
  "Generate the evil mode-line tag for STATE."
  (let ((tag (evil-state-property state :tag t)))
    ;; prepare mode-line: add tooltip
    (if (stringp tag)
        (propertize tag		    
                    'help-echo (evil-state-property state :name)
                    'mouse-face 'mode-line-highlight 'face '(:foreground "red"))
      tag)))

(global-set-key "\M-;" 'evil-mode)
;;;;;;;;;;;;;;;;;;;;;;;;NORMAL-MODE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define-key evil-emacs-state-map "  " (lambda() (interactive)(insert-char #x20)))
(define-key evil-emacs-state-map " p" 'point-to-register)
(define-key evil-emacs-state-map " j" 'jump-to-register)
(define-key evil-emacs-state-map " x" 'execute-extended-command)
(define-key evil-emacs-state-map " b" 'buffer-menu)
(define-key evil-emacs-state-map " s" 'isearch-forward-regexp)

;;file
(define-key evil-emacs-state-map " ff" 'find-file)
(define-key evil-emacs-state-map " fa" (lambda() (interactive)(switch-to-buffer "*scratch*")))
(define-key evil-emacs-state-map " fm" (lambda() (interactive)(switch-to-buffer "*Messages*")))
(define-key evil-emacs-state-map " fr" 'refresh-file)
(define-key evil-emacs-state-map " fs" 'eshell)
(define-key evil-emacs-state-map " fw" 'kill-current-buffer)

(define-key evil-emacs-state-map "c" 'comment-or-uncomment-region)
(define-key evil-emacs-state-map "n" 'next-line)
(define-key evil-emacs-state-map "p" 'previous-line)
(define-key evil-emacs-state-map "f" 'forward-char)
(define-key evil-emacs-state-map "b" 'backward-char)
(define-key evil-emacs-state-map "F" 'forward-word)
(define-key evil-emacs-state-map "B" 'backward-word)
(define-key evil-emacs-state-map "v" 'scroll-up-command)
(define-key evil-emacs-state-map "V" 'scroll-down-command)
(define-key evil-emacs-state-map "w" 'kill-ring-save)
(define-key evil-emacs-state-map "\M-w" 'kill-region)
(define-key evil-emacs-state-map "g" 'goto-line)
(define-key evil-emacs-state-map "s" 'save-buffer)
(define-key evil-emacs-state-map "d" (lambda() (interactive)
				       (if (region-active-p)
					   (call-interactively #'kill-region)
					 (call-interactively #'delete-char))))
(define-key evil-emacs-state-map "k" 'kill-line)
(define-key evil-emacs-state-map "oo" 'other-window)
(define-key evil-emacs-state-map "of" 'delete-other-windows)
(define-key evil-emacs-state-map "x" 'execute-extended-command)
(define-key evil-emacs-state-map " x" 'save-buffers-kill-terminal)
(define-key evil-emacs-state-map "u" 'undo)
(define-key evil-emacs-state-map "r" 'undo-tree-redo)
(define-key evil-emacs-state-map "y" 'yank)
(define-key evil-emacs-state-map "m" 'set-mark-command)
(define-key evil-emacs-state-map "a" 'beginning-of-line)
(define-key evil-emacs-state-map "e" 'move-end-of-line)
(define-key evil-emacs-state-map "," 'beginning-of-buffer)
(define-key evil-emacs-state-map "." 'end-of-buffer)
(define-key evil-emacs-state-map "l" 'recenter-top-bottom)
(define-key evil-emacs-state-map "(" (lambda() (interactive)
					(insert-char #x28)
					(yank)
					(insert-char #x29)))


(define-key evil-emacs-state-map "i" 'evil-mode)
(define-key evil-emacs-state-map "I" 'evil-mode)
(define-key evil-emacs-state-map "q" 'evil-mode)

;;(define-key evil-emacs-state-map "" ')
(let ((ii 97)
      (ch)
      )
  (while (< ii (+ 97 26))
    (setq ch (format "(define-key evil-emacs-state-map \"h%s\" (lambda() (interactive)(insert-char %s)))"
		     (char-to-string ii) ii))
    (with-temp-buffer    (insert ch)    (eval-buffer))
    (setq ii (+ ii 1))
    )
  (setq ii 65)
  (while (< ii (+ 65 26))
    (setq ch (format "(define-key evil-emacs-state-map \"h%s\" (lambda() (interactive)(insert-char %s)))"
		     (char-to-string ii) ii))
    (with-temp-buffer    (insert ch)    (eval-buffer))
    (setq ii (+ ii 1))
    )

  (setq ii 44)
    (setq ch (format "(define-key evil-emacs-state-map \"h%s\" (lambda() (interactive)(insert-char %s)))"
		     (char-to-string ii) ii))
    (with-temp-buffer    (insert ch)    (eval-buffer))

  (setq ii 46)
    (setq ch (format "(define-key evil-emacs-state-map \"h%s\" (lambda() (interactive)(insert-char %s)))"
		     (char-to-string ii) ii))
    (with-temp-buffer    (insert ch)    (eval-buffer))
  )

