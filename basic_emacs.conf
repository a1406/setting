(custom-set-variables
  '(initial-frame-alist (quote ((fullscreen . fullscreen)))))
;; '(initial-frame-alist (quote ((fullscreen . maximized)))))

(when (> emacs-major-version 23)
  (require 'package)
  (if (not package--initialized)
      (package-initialize))
;;  (setq package-archives '(("gnu"   . "http://elpa.zilongshanren.com/gnu/")
;;			   ("melpa" . "http://elpa.zilongshanren.com/melpa/")))
  (setq package-archives '(
			   ("melpa" . "http://mirrors.163.com/elpa/melpa/")
			   ("gnu"   . "http://mirrors.163.com/elpa/gnu/")
			   ))
  ;;	(setq package-archives '(("melpa" . "http://melpa.milkbox.net/packages/")))
  )

;; enable cygwin clear, default set it does not work
(add-hook 'shell-mode-hook 'n-shell-mode-hook)
(defun n-shell-mode-hook ()
  "12Jan2002 - sailor, shell mode customizations."
;;  (local-set-key '[up] 'comint-previous-input)
;;  (local-set-key '[down] 'comint-next-input)
;;  (local-set-key '[(shift tab)] 'comint-next-matching-input-from-input)
  (setq comint-input-sender 'n-shell-simple-send)
;;  (local-set-key "\C-c." (function rtags-find-symbol))  
  )


(defun n-shell-simple-send (proc command)
  "17Jan02 - sailor. Various commands pre-processing before sending to shell."
  (cond
   ;; Checking for clear command and execute it.
   ((string-match "^[ \t]*clear[ \t]*$" command)
    (comint-send-string proc "\n")
    (erase-buffer)
    )
   ;; Checking for man command and execute it.
   ((string-match "^[ \t]*man[ \t]*" command)
    (comint-send-string proc "\n")
    (setq command (replace-regexp-in-string "^[ \t]*man[ \t]*" "" command))
    (setq command (replace-regexp-in-string "[ \t]+$" "" command))
    ;;(message (format "command %s command" command))
    (funcall 'man command)
    )
   ;; Send other commands to the default handler.
   (t (comint-simple-send proc command))
   )
  )

(setq normal-erase-is-backspace-mode 1)

(tool-bar-mode 0)
;;(menu-bar-mode nil)

(setq time-stamp-active t)
(setq time-stamp-warn-inactive t)
(setq time-stamp-format "%:u %02m/%02d/%04y %02h%02m%02s")

(display-time-mode 1)
(setq display-time-24hr-format t)
(setq display-time-day-and-date t)
(setq display-time-interval 10)

;;Display the pictures in Emacs
(auto-image-file-mode)

;;Directly open tgz file
(auto-compression-mode 1)

(mouse-avoidance-mode 'animate)

(blink-cursor-mode 1)

(setq resize-mini-windows t)

;;Display the column number in mini-bar
(column-number-mode t)

(transient-mark-mode 1)

(setq inhibit-startup-message t)

(put 'narrow-to-region 'disabled nil)

(split-window-vertically)


(global-set-key "\C-xm" 'imenu)
(global-set-key "\M-_" 'repeat)
(global-set-key "\C-xc" 'set-mark-command)

(global-set-key "\C-x\C-t" 'toggle-read-only)
(global-set-key "\C-c\C-s" 'shell)
;;(global-set-key "\C-c\C-s" 'ansi-term)
(global-set-key "\C-cm" 'buffer-menu)

;;(global-set-key "\C-h" 'delete-char)
;;(global-set-key "\C-h\C-hk" 'describe-key)
;;(global-set-key "\C-h\C-hw" 'where-is)
(global-set-key "\C-xg" 'goto-line)
(global-set-key "\C-xj" 'jump-to-register)
(global-set-key "\C-o" 'keyboard-quit)

(global-set-key "\C-cn" 'scroll-other-window)
(global-set-key "\C-cp" 'scroll-other-window-down)

(define-prefix-command 'meta_m)
(global-set-key "\M-m" 'meta_m)
(global-set-key "\M-ml" 'ace-jump-line-mode)
(global-set-key "\M-mp" 'ace-jump-mode)
(global-set-key "\M-mr" 'cua-rectangle-mark-mode)

(add-hook 'write-file-hooks 'time-stamp)

(defconst my-c-style
  '((c-tab-always-indent        . t)
    (c-comment-only-line-offset . 4)
    (c-hanging-braces-alist     . ((substatement-open after)
				   (brace-list-open)))
    (c-hanging-colons-alist     . ((member-init-intro before)
				   (inher-intro)
				   (case-label after)
				   (label after)
				   (access-label after)))
    (c-cleanup-list             . (scope-operator
				   empty-defun-braces
				   defun-close-semi))
    (c-offsets-alist            . ((arglist-close . c-lineup-arglist)
				   (substatement-open . 0)
				   (label . nil)
				   (arglist-cont-nonempty  . 4)
				   (case-label        . 4)
				   (block-open        . 0)
				   (knr-argdecl-intro . -)))
    (c-echo-syntactic-information-p . t)
    )
  "My C Programming Style")

;; offset customizations not in my-c-style
(setq c-offsets-alist '((member-init-intro . ++)))

;; Customizations for all modes in CC Mode.
(defun my-c-mode-common-hook ()
  ;; add my personal style and set it for the current buffer
  (hs-minor-mode t)
;;  (auto-highlight-symbol-mode t)
  (c-add-style "PERSONAL" my-c-style t)
  ;; other customizations
  (setq tab-width 4)
	;; this will make sure spaces are used instead of tabs
;;  (setq indent-tabs-mode nil)
  ;; we like auto-newline and hungry-delete
  ;;(c-toggle-auto-hungry-state nil)
  ;; key bindings for all supported languages.  We can put these in
  ;; c-mode-base-map because c-mode-map, c++-mode-map, objc-mode-map,
  ;; java-mode-map, idl-mode-map, and pike-mode-map inherit from it.
  (local-set-key "\C-m" 'c-context-line-break)
  (local-set-key "\C-c\C-h" 'hs-hide-block)
  (local-set-key "\C-c\C-j" 'hs-show-block)
  (local-set-key "\C-c\C-k" 'hs-show-all)
  (local-set-key "\C-c." (function rtags-find-symbol))    
  )

(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)
(add-hook 'cpp-mode-common-hook 'my-c-mode-common-hook)

(defun refresh-file ()  
  (interactive)  
  (revert-buffer t (not (buffer-modified-p)) t))  
  
(global-set-key "\C-x\C-r" 'refresh-file)  
(setq python-shell-interpreter "ipython")

(setq auto-save-hook nil)


(setq pfl-packages
      '(
	god-mode
	))

;; refresh package list if it is not already available
(when (not package-archive-contents) (package-refresh-contents))

;; install packages from the list that are not yet installed
(dolist (pkg pfl-packages)
  (if (not (package-installed-p pkg))
      (if (assoc pkg package-archive-contents)
	  (package-install pkg)
	(progn   (package-refresh-contents)
		 (package-install pkg)))))



(require 'god-mode)
(global-set-key (kbd "M-`") 'god-mode-all)
(setq god-exempt-major-modes nil)
(setq god-exempt-predicates nil)
(define-key god-local-mode-map (kbd "m") 'set-mark-command)
(define-key god-local-mode-map (kbd "z") 'repeat)
(define-key god-local-mode-map (kbd "i") 'god-mode-all)
(define-key god-local-mode-map (kbd "q") 'god-mode-all)
