* subscription
#+BEGIN_SRC go
type subscription struct {
	client  *client
	subject []byte
	queue   []byte
	sid     []byte
	nm      int64
	max     int64
}
#+END_SRC

* SublistResult
#+BEGIN_SRC go
type SublistResult struct {
	psubs []*subscription
	qsubs [][]*subscription // don't make this a map, too expensive to iterate
}
#+END_SRC

* Sublist
#+BEGIN_SRC go
type Sublist struct {
	sync.RWMutex
	genid     uint64
	matches   uint64
	cacheHits uint64
	inserts   uint64
	removes   uint64
	cache     map[string]*SublistResult
	root      *level
	count     uint32
}
#+END_SRC
用类似hash_map的算法维护
主要接口: 
** Insert 
processSub: err = c.srv.sl.Insert(sub)
** Remove 
unsubscribe: c.srv.sl.Remove(sub)
closeConnection: srv.sl.Remove(sub)
** Match
processMsg: r = srv.sl.Match(subject)

* client
#+BEGIN_SRC go
type client struct {
	// Here first because of use of atomics, and memory alignment.
	stats
	mpay  int64
	mu    sync.Mutex
	typ   int                   //0是客户端，1是其他服务端
	cid   uint64                //递增的ID，类似sessionid
	opts  clientOpts
	start time.Time
	nc    net.Conn              //连接
	ncs   string                //连接的字符串信息
	bw    *bufio.Writer
	srv   *Server
	subs  map[string]*subscription    //所有的订阅
	perms *permissions
	cache readCache
	pcd   map[*client]struct{}
	atmr  *time.Timer                 //setAuthTimer
	ptmr  *time.Timer                   //setPingTimer
	pout  int                          //ping超时次数
	wfc   int
	msgb  [msgScratchSize]byte
	last  time.Time
	parseState

	route *route
	debug bool
	trace bool

	flags clientFlag // Compact booleans into a single field. Size will be increased when needed.
}
#+END_SRC
* Server

* todo
#+BEGIN_SRC go
// A node contains subscriptions and a pointer to the next level.
type node struct {
	next  *level
	psubs []*subscription
	qsubs [][]*subscription
}

// A level represents a group of nodes and special pointers to
// wildcard nodes.
type level struct {
	nodes    map[string]*node
	pwc, fwc *node
}
#+END_SRC

* node
#+BEGIN_SRC go
// A node contains subscriptions and a pointer to the next level.
type node struct {
	next  *level              //可以进一步进行匹配的节点
	psubs []*subscription
	qsubs [][]*subscription    //匹配到该node所属的level为止时，主题对应的所有订阅者
}
#+END_SRC

* level
#+BEGIN_SRC go
// A level represents a group of nodes and special pointers to
// wildcard nodes.
type level struct {
	nodes    map[string]*node    //一个Hash，key是token，value是对应的node
	pwc, fwc *node              //pwc:由*匹配的节点 fwc:由>指向的节点
}
#+END_SRC
